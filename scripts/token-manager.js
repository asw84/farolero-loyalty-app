#!/usr/bin/env node

/**
 * amoCRM Token Manager - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
 * - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
 * - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */

const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π
const CONFIG_PATH = path.join(__dirname, '../backend/amocrm/amocrm.json');
const TOKENS_PATH = path.join(__dirname, '../backend/tokens.json');
const BACKUP_DIR = path.join(__dirname, '../persistent_data/token_backups');
const LOG_FILE = path.join(__dirname, '../logs/token-manager.log');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
[path.dirname(LOG_FILE), BACKUP_DIR].forEach(dir => {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }
});

class TokenManager {
    constructor() {
        this.config = this.loadConfig();
        this.tokens = this.loadTokens();
        this.retryCount = 0;
        this.maxRetries = 3;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é amoCRM
     */
    loadConfig() {
        try {
            if (!fs.existsSync(CONFIG_PATH)) {
                throw new Error(`–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${CONFIG_PATH}`);
            }
            const config = JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf-8'));
            this.log(`[CONFIG] ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ ${CONFIG_PATH}`);
            return config;
        } catch (error) {
            this.log(`[CONFIG] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: ${error.message}`, 'error');
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
     */
    loadTokens() {
        try {
            if (!fs.existsSync(TOKENS_PATH)) {
                this.log(`[TOKENS] ‚ö†Ô∏è –§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π`);
                return { access_token: '', refresh_token: '', created_at: 0, expires_in: 0 };
            }
            
            const tokens = JSON.parse(fs.readFileSync(TOKENS_PATH, 'utf-8'));
            this.log(`[TOKENS] ‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å—Ä–æ–∫ –¥–æ ${new Date((tokens.created_at + tokens.expires_in) * 1000).toLocaleString()}`);
            return tokens;
        } catch (error) {
            this.log(`[TOKENS] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: ${error.message}`, 'error');
            return { access_token: '', refresh_token: '', created_at: 0, expires_in: 0 };
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    saveTokens(tokens) {
        try {
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if (fs.existsSync(TOKENS_PATH)) {
                const backupName = `tokens_backup_${Date.now()}.json`;
                const backupPath = path.join(BACKUP_DIR, backupName);
                fs.copyFileSync(TOKENS_PATH, backupPath);
                this.log(`[BACKUP] üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupName}`);
                
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
                this.cleanupBackups();
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            tokens.created_at = tokens.created_at || Math.floor(Date.now() / 1000);
            tokens.updated_by = 'token-manager';
            tokens.last_refresh = new Date().toISOString();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
            fs.writeFileSync(TOKENS_PATH, JSON.stringify(tokens, null, 2));
            this.tokens = tokens;
            
            this.log(`[TOKENS] ‚úÖ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Å—Ä–æ–∫ –¥–æ ${new Date((tokens.created_at + tokens.expires_in) * 1000).toLocaleString()}`);
            
            return true;
        } catch (error) {
            this.log(`[TOKENS] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: ${error.message}`, 'error');
            return false;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
     */
    cleanupBackups() {
        try {
            const files = fs.readdirSync(BACKUP_DIR)
                .filter(file => file.startsWith('tokens_backup_'))
                .map(file => ({
                    name: file,
                    path: path.join(BACKUP_DIR, file),
                    time: fs.statSync(path.join(BACKUP_DIR, file)).mtime
                }))
                .sort((a, b) => b.time - a.time);

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            if (files.length > 10) {
                files.slice(10).forEach(file => {
                    fs.unlinkSync(file.path);
                    this.log(`[BACKUP] üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: ${file.name}`);
                });
            }
        } catch (error) {
            this.log(`[BACKUP] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤: ${error.message}`, 'warning');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω (–∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)
     */
    isTokenExpired(tokens = this.tokens) {
        if (!tokens.access_token || !tokens.created_at || !tokens.expires_in) {
            return true;
        }
        
        const expirationTime = tokens.created_at + tokens.expires_in;
        const currentTime = Math.floor(Date.now() / 1000);
        const timeUntilExpiry = expirationTime - currentTime;
        
        // –°—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫—à–∏–º –∑–∞ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥) –¥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        return timeUntilExpiry <= 300;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     */
    getTimeUntilExpiry(tokens = this.tokens) {
        if (!tokens.created_at || !tokens.expires_in) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        const expirationTime = tokens.created_at + tokens.expires_in;
        const currentTime = Math.floor(Date.now() / 1000);
        const secondsLeft = expirationTime - currentTime;
        
        if (secondsLeft <= 0) return '–∏—Å—Ç–µ–∫';
        
        const hours = Math.floor(secondsLeft / 3600);
        const minutes = Math.floor((secondsLeft % 3600) / 60);
        
        return `${hours}—á ${minutes}–º`;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—è refresh_token
     */
    async refreshTokens() {
        try {
            this.log(`[REFRESH] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...`);
            
            if (!this.tokens.refresh_token) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.');
            }

            const response = await axios.post(`${this.config.base_url}/oauth2/access_token`, {
                client_id: this.config.client_id,
                client_secret: this.config.client_secret,
                grant_type: 'refresh_token',
                refresh_token: this.tokens.refresh_token,
                redirect_uri: this.config.redirect_uri
            });

            const newTokens = {
                access_token: response.data.access_token,
                refresh_token: response.data.refresh_token,
                expires_in: response.data.expires_in,
                created_at: Math.floor(Date.now() / 1000)
            };

            if (this.saveTokens(newTokens)) {
                this.retryCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                this.log(`[REFRESH] ‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –î–µ–π—Å—Ç–≤—É—é—Ç –¥–æ ${new Date((newTokens.created_at + newTokens.expires_in) * 1000).toLocaleString()}`);
                return true;
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã');
            }

        } catch (error) {
            this.retryCount++;
            this.log(`[REFRESH] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ ${this.retryCount}/${this.maxRetries}): ${error.message}`, 'error');
            
            if (error.response) {
                this.log(`[REFRESH] üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data)}`, 'error');
            }
            
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—è auth_code
     */
    async getInitialTokens() {
        try {
            this.log(`[INITIAL] üîë –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤...`);
            
            if (!this.config.auth_code) {
                const authUrl = this.generateAuthUrl();
                throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç auth_code. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ: ${authUrl}`);
            }

            const response = await axios.post(`${this.config.base_url}/oauth2/access_token`, {
                client_id: this.config.client_id,
                client_secret: this.config.client_secret,
                grant_type: 'authorization_code',
                code: this.config.auth_code,
                redirect_uri: this.config.redirect_uri
            });

            const tokens = {
                access_token: response.data.access_token,
                refresh_token: response.data.refresh_token,
                expires_in: response.data.expires_in,
                created_at: Math.floor(Date.now() / 1000)
            };

            if (this.saveTokens(tokens)) {
                this.log(`[INITIAL] ‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
                
                // –û—á–∏—â–∞–µ–º auth_code –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                this.config.auth_code = '';
                fs.writeFileSync(CONFIG_PATH, JSON.stringify(this.config, null, 2));
                this.log(`[INITIAL] üßπ auth_code –æ—á–∏—â–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞`);
                
                return true;
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã');
            }

        } catch (error) {
            this.log(`[INITIAL] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${error.message}`, 'error');
            return false;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    generateAuthUrl() {
        const authUrl = new URL(`${this.config.base_url}/oauth2/authorize`);
        authUrl.searchParams.set('client_id', this.config.client_id);
        authUrl.searchParams.set('state', `token_manager_${Date.now()}`);
        authUrl.searchParams.set('response_type', 'code');
        authUrl.searchParams.set('mode', 'post_message');
        authUrl.searchParams.set('redirect_uri', this.config.redirect_uri);
        
        return authUrl.toString();
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
     */
    async checkAndRefreshTokens() {
        this.log(`[CHECK] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...`);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –∏–∑–≤–Ω–µ
        this.tokens = this.loadTokens();
        
        const timeUntilExpiry = this.getTimeUntilExpiry();
        this.log(`[CHECK] ‚è∞ –í—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${timeUntilExpiry}`);

        if (!this.tokens.access_token) {
            this.log(`[CHECK] ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç access_token`);
            return await this.getInitialTokens();
        }

        if (this.isTokenExpired()) {
            this.log(`[CHECK] ‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
            
            if (await this.refreshTokens()) {
                return true;
            } else if (this.retryCount >= this.maxRetries) {
                this.log(`[CHECK] üí• –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
                const authUrl = this.generateAuthUrl();
                this.log(`[CHECK] üîó –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${authUrl}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.sendNotification('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è amoCRM', authUrl);
                
                return false;
            }
        } else {
            this.log(`[CHECK] ‚úÖ –¢–æ–∫–µ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
            return true;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è Telegram, email, etc.)
     */
    sendNotification(title, message) {
        this.log(`[NOTIFICATION] üì¢ ${title}: ${message}`, 'warning');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram, email, Slack, etc.
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:
        // await this.sendTelegramNotification(title, message);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è API
     */
    getTokenStatus() {
        const timeUntilExpiry = this.getTimeUntilExpiry();
        const isExpired = this.isTokenExpired();
        
        return {
            has_access_token: !!this.tokens.access_token,
            has_refresh_token: !!this.tokens.refresh_token,
            is_expired: isExpired,
            time_until_expiry: timeUntilExpiry,
            expires_at: this.tokens.created_at ? new Date((this.tokens.created_at + this.tokens.expires_in) * 1000).toISOString() : null,
            last_refresh: this.tokens.last_refresh || null,
            retry_count: this.retryCount,
            auth_url: isExpired && this.retryCount >= this.maxRetries ? this.generateAuthUrl() : null
        };
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
     */
    log(message, level = 'info') {
        const timestamp = new Date().toISOString();
        const logEntry = `[${timestamp}] [${level.toUpperCase()}] ${message}`;
        
        console.log(logEntry);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        try {
            fs.appendFileSync(LOG_FILE, logEntry + '\n');
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
     */
    getLogs(lines = 100) {
        try {
            if (!fs.existsSync(LOG_FILE)) {
                return [];
            }
            
            const logs = fs.readFileSync(LOG_FILE, 'utf-8')
                .split('\n')
                .filter(line => line.trim())
                .slice(-lines);
                
            return logs;
        } catch (error) {
            this.log(`[LOGS] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${error.message}`, 'error');
            return [];
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = TokenManager;

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const manager = new TokenManager();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    
    switch (args[0]) {
        case 'check':
            manager.checkAndRefreshTokens()
                .then(success => process.exit(success ? 0 : 1))
                .catch(error => {
                    manager.log(`[MAIN] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
                    process.exit(1);
                });
            break;
            
        case 'status':
            console.log(JSON.stringify(manager.getTokenStatus(), null, 2));
            break;
            
        case 'logs':
            const lines = parseInt(args[1]) || 50;
            manager.getLogs(lines).forEach(log => console.log(log));
            break;
            
        case 'auth-url':
            console.log(manager.generateAuthUrl());
            break;
            
        case 'daemon':
            // –†–µ–∂–∏–º –¥–µ–º–æ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            setInterval(async () => {
                try {
                    await manager.checkAndRefreshTokens();
                } catch (error) {
                    manager.log(`[DAEMON] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞: ${error.message}`, 'error');
                }
            }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
            
            manager.log(`[DAEMON] üöÄ –ó–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)`);
            break;
            
        default:
            console.log(`
AmoCRM Token Manager v1.0.0

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node token-manager.js <–∫–æ–º–∞–Ω–¥–∞>

–ö–æ–º–∞–Ω–¥—ã:
  check      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)
  status     - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤
  logs [N]   - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
  auth-url   - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  daemon     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞ (–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞)

–ü—Ä–∏–º–µ—Ä—ã:
  node token-manager.js check
  node token-manager.js status
  node token-manager.js logs 100
  node token-manager.js daemon
            `);
            break;
    }
}
