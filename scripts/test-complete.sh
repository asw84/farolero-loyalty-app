#!/bin/bash
# scripts/test-complete.sh
# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º

set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

echo "üß™ === –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FAROLERO LOYALTY APP ==="
echo "üìÖ –î–∞—Ç–∞: $(date)"
echo "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
TESTS_PASSED=0
TESTS_FAILED=0
WARNINGS=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
run_test() {
    local test_name="$1"
    local test_command="$2"
    
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: $test_name"
    
    if eval "$test_command"; then
        log_success "$test_name - –£–°–ü–ï–®–ù–û"
        ((TESTS_PASSED++))
        return 0
    else
        log_error "$test_name - –û–®–ò–ë–ö–ê"
        ((TESTS_FAILED++))
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
check_warning() {
    local check_name="$1"
    local check_command="$2"
    local warning_message="$3"
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞: $check_name"
    
    if eval "$check_command"; then
        log_success "$check_name - –û–ö"
        return 0
    else
        log_warning "$check_name - $warning_message"
        ((WARNINGS++))
        return 1
    fi
}

echo ""
echo "üîç === –≠–¢–ê–ü 1: –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞" "[ -f docker-compose.yml ] && [ -d backend ] && [ -d frontend ]"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker" "docker --version > /dev/null 2>&1"
run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose" "docker-compose --version > /dev/null 2>&1"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤)
check_warning "–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js" "node --version > /dev/null 2>&1" "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è Docker-–¥–µ–ø–ª–æ—è)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

if [ -f "backend/.env" ]; then
    log_success "–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    critical_vars=("AMOCRM_DOMAIN" "AMOCRM_CLIENT_ID" "AMOCRM_CLIENT_SECRET" "VK_CLIENT_ID" "JWT_SECRET")
    
    for var in "${critical_vars[@]}"; do
        if grep -q "^$var=" backend/.env && ! grep -q "^$var=$" backend/.env; then
            log_success "$var –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        else
            log_error "$var –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞"
            ((TESTS_FAILED++))
        fi
    done
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
    optional_vars=("TELEGRAM_BOT_TOKEN" "VK_CLIENT_SECRET" "INSTAGRAM_APP_ID")
    
    for var in "${optional_vars[@]}"; do
        if grep -q "^$var=" backend/.env && ! grep -q "^$var=$" backend/.env && ! grep -q "REQUIRED" backend/.env | grep "$var"; then
            log_success "$var –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        else
            log_warning "$var –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)"
            ((WARNINGS++))
        fi
    done
else
    log_error "–§–∞–π–ª backend/.env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    ((TESTS_FAILED++))
fi

echo ""
echo "üî® === –≠–¢–ê–ü 2: –°–ë–û–†–ö–ê –ò –õ–û–ö–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ ==="

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backend –¥–ª—è —Ç–µ—Å—Ç–æ–≤
cd backend

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
run_test "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend" "npm install --silent"

# –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ Jest –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
if [ -f "package.json" ] && grep -q '"test"' package.json; then
    log_info "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
    if npm test 2>/dev/null; then
        log_success "Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
        ((TESTS_PASSED++))
    else
        log_warning "Unit —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        ((WARNINGS++))
    fi
else
    log_warning "Unit —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    ((WARNINGS++))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript" "node -c server.js"

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
cd ..

echo ""
echo "üê≥ === –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DOCKER ==="

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down --remove-orphans 2>/dev/null || true

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
run_test "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤" "docker-compose build --no-cache"

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
if docker-compose up -d; then
    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
    ((TESTS_PASSED++))
else
    log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    ((TESTS_FAILED++))
    exit 1
fi

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (60 —Å–µ–∫—É–Ω–¥)..."
sleep 60

echo ""
echo "üåê === –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ==="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP endpoint
test_endpoint() {
    local name="$1"
    local url="$2"
    local expected_status="$3"
    
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: $name"
    
    if command -v curl >/dev/null 2>&1; then
        response_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
        
        if [ "$response_code" = "$expected_status" ]; then
            log_success "$name –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response_code)"
            ((TESTS_PASSED++))
        else
            log_error "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response_code, –æ–∂–∏–¥–∞–ª—Å—è $expected_status)"
            ((TESTS_FAILED++))
        fi
    else
        log_warning "curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º HTTP —Ç–µ—Å—Ç—ã"
        ((WARNINGS++))
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
test_endpoint "Backend Health Check" "http://localhost:3001/health" "200"
test_endpoint "Frontend" "http://localhost:8080/" "200"
test_endpoint "Auth Setup Page" "http://localhost:3001/auth/setup" "200"
test_endpoint "API Test DB" "http://localhost:3001/api/test/db" "200"

echo ""
echo "üîç === –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
log_info "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ backend..."
backend_logs=$(docker-compose logs backend 2>/dev/null | tail -50)

if echo "$backend_logs" | grep -qi "error\|exception\|failed"; then
    log_warning "–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö backend"
    ((WARNINGS++))
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤:"
    echo "$backend_logs" | tail -10
else
    log_success "–õ–æ–≥–∏ backend –≤—ã–≥–ª—è–¥—è—Ç —á–∏—Å—Ç—ã–º–∏"
    ((TESTS_PASSED++))
fi

log_info "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ frontend..."
frontend_logs=$(docker-compose logs frontend 2>/dev/null | tail -50)

if echo "$frontend_logs" | grep -qi "error\|exception\|failed"; then
    log_warning "–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö frontend"
    ((WARNINGS++))
else
    log_success "–õ–æ–≥–∏ frontend –≤—ã–≥–ª—è–¥—è—Ç —á–∏—Å—Ç—ã–º–∏"
    ((TESTS_PASSED++))
fi

echo ""
echo "üè• === –≠–¢–ê–ü 6: HEALTH CHECKS ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker health —Å—Ç–∞—Ç—É—Å–∞
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ health —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."

backend_health=$(docker-compose ps --format "table {{.Name}}\t{{.Status}}" | grep backend | grep -o "healthy\|unhealthy\|starting" || echo "unknown")
frontend_health=$(docker-compose ps --format "table {{.Name}}\t{{.Status}}" | grep frontend | grep -o "healthy\|unhealthy\|starting" || echo "unknown")

if [ "$backend_health" = "healthy" ]; then
    log_success "Backend health check: –∑–¥–æ—Ä–æ–≤—ã–π"
    ((TESTS_PASSED++))
else
    log_warning "Backend health check: $backend_health"
    ((WARNINGS++))
fi

if [ "$frontend_health" = "healthy" ]; then
    log_success "Frontend health check: –∑–¥–æ—Ä–æ–≤—ã–π"
    ((TESTS_PASSED++))
else
    log_warning "Frontend health check: $frontend_health"
    ((WARNINGS++))
fi

echo ""
echo "üîÑ === –≠–¢–ê–ü 7: –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
check_external_service() {
    local service_name="$1"
    local service_url="$2"
    
    if command -v curl >/dev/null 2>&1; then
        if curl -s --connect-timeout 10 "$service_url" >/dev/null; then
            log_success "$service_name –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log_warning "$service_name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π"
            ((WARNINGS++))
        fi
    fi
}

log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
check_external_service "AmoCRM API" "https://new5a097b0640fce.amocrm.ru"
check_external_service "VK API" "https://api.vk.com"
check_external_service "Telegram API" "https://api.telegram.org"

echo ""
echo "üíæ === –≠–¢–ê–ü 8: –ü–†–û–í–ï–†–ö–ê –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ volumes
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker volumes..."
if docker volume ls | grep -q "tokens_volume"; then
    log_success "Volume –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω"
    ((TESTS_PASSED++))
else
    log_warning "Volume –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    ((WARNINGS++))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ persistent_data –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ -d "persistent_data" ]; then
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è persistent_data —Å–æ–∑–¥–∞–Ω–∞"
    ((TESTS_PASSED++))
else
    log_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è persistent_data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    ((WARNINGS++))
fi

echo ""
echo "üìä === –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ==="

total_tests=$((TESTS_PASSED + TESTS_FAILED))
success_rate=0

if [ $total_tests -gt 0 ]; then
    success_rate=$((TESTS_PASSED * 100 / total_tests))
fi

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:"
echo "   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: $TESTS_PASSED"
echo "   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: $TESTS_FAILED"
echo "   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $WARNINGS"
echo "   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $success_rate%"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
echo ""
echo "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"

if [ $TESTS_FAILED -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    log_success "–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é! –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ."
    echo "üöÄ –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –¥–µ–ø–ª–æ—é –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä."
elif [ $TESTS_FAILED -eq 0 ] && [ $WARNINGS -gt 0 ]; then
    log_warning "–ü—Ä–æ–µ–∫—Ç —É—Å–ª–æ–≤–Ω–æ –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é."
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏."
else
    log_error "–ü—Ä–æ–µ–∫—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!"
    echo "üõ†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º."
fi

echo ""
echo "üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
echo "1. –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)"
echo "2. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ production –æ–∫—Ä—É–∂–µ–Ω–∏—è"
echo "4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ backup –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
echo "5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"

echo ""
echo "üîó –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:"
echo "   docker-compose logs backend    # –õ–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞"
echo "   docker-compose logs frontend   # –õ–æ–≥–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
echo "   docker-compose ps              # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
echo "   curl http://localhost:3001/health  # Health check"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
if [ $TESTS_FAILED -gt 0 ]; then
    echo ""
    log_error "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥ –≤—ã—Ö–æ–¥–∞: 1)"
    exit 1
else
    echo ""
    log_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (–∫–æ–¥ –≤—ã—Ö–æ–¥–∞: 0)"
    exit 0
fi
