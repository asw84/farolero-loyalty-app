// scripts/security-check.js
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –≤ GitHub

const fs = require('fs');
const path = require('path');

console.log('üîí === –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–ï–†–ï–î –ü–£–ë–õ–ò–ö–ê–¶–ò–ï–ô ===');
console.log('üìÖ', new Date().toLocaleString());
console.log('');

let securityIssues = 0;
let warnings = 0;

function logError(message) {
    console.log('‚ùå', message);
    securityIssues++;
}

function logWarning(message) {
    console.log('‚ö†Ô∏è ', message);
    warnings++;
}

function logSuccess(message) {
    console.log('‚úÖ', message);
}

function logInfo(message) {
    console.log('‚ÑπÔ∏è ', message);
}

// 1. –ü–†–û–í–ï–†–ö–ê .gitignore
console.log('üîç === –ü–†–û–í–ï–†–ö–ê .gitignore ===');

if (fs.existsSync('.gitignore')) {
    const gitignoreContent = fs.readFileSync('.gitignore', 'utf-8');
    
    const criticalPatterns = [
        '.env',
        '*.db',
        'tokens.json',
        'node_modules',
        '*secret*',
        '*key*.json'
    ];

    for (const pattern of criticalPatterns) {
        if (gitignoreContent.includes(pattern)) {
            logSuccess(`${pattern} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ Git`);
        } else {
            logError(`–ö–†–ò–¢–ò–ß–ù–û: ${pattern} –ù–ï –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ Git`);
        }
    }
} else {
    logError('–ö–†–ò–¢–ò–ß–ù–û: .gitignore —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
}

// 2. –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –°–ï–ö–†–ï–¢–ù–´–• –§–ê–ô–õ–û–í
console.log('');
console.log('üîê === –ü–†–û–í–ï–†–ö–ê –°–ï–ö–†–ï–¢–ù–´–• –§–ê–ô–õ–û–í ===');

const sensitiveFiles = [
    'backend/.env',
    'backend/tokens.json',
    'backend/farolero_loyalty.db'
];

for (const file of sensitiveFiles) {
    if (fs.existsSync(file)) {
        logError(`–ö–†–ò–¢–ò–ß–ù–û: –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª ${file} –Ω–∞–π–¥–µ–Ω - –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ Git`);
    } else {
        logSuccess(`${file} –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ —Ö–æ—Ä–æ—à–æ –¥–ª—è Git)`);
    }
}

// 3. –ü–†–û–í–ï–†–ö–ê .env.example
console.log('');
console.log('üìã === –ü–†–û–í–ï–†–ö–ê .env.example ===');

if (fs.existsSync('backend/.env.example')) {
    const envExampleContent = fs.readFileSync('backend/.env.example', 'utf-8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
    const suspiciousPatterns = [
        /sk-[a-zA-Z0-9]{48}/,  // OpenAI API keys
        /[0-9]{10}:[a-zA-Z0-9_-]{35}/,  // Telegram bot tokens
        /def50200[a-f0-9]{200,}/,  // AmoCRM refresh tokens
        /AKIA[0-9A-Z]{16}/,  // AWS access keys
    ];

    let foundSuspicious = false;
    for (const pattern of suspiciousPatterns) {
        if (pattern.test(envExampleContent)) {
            logError('–ö–†–ò–¢–ò–ß–ù–û: –ù–∞–π–¥–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á –≤ .env.example');
            foundSuspicious = true;
        }
    }

    if (!foundSuspicious) {
        logSuccess('.env.example –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ placeholder –∑–Ω–∞—á–µ–Ω–∏–π
    const requiredPlaceholders = [
        'your_',
        'YOUR_',
        'your-domain',
        'here'
    ];

    let hasPlaceholders = false;
    for (const placeholder of requiredPlaceholders) {
        if (envExampleContent.includes(placeholder)) {
            hasPlaceholders = true;
            break;
        }
    }

    if (hasPlaceholders) {
        logSuccess('Placeholder –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –≤ .env.example');
    } else {
        logWarning('.env.example –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
    }

} else {
    logError('–ö–†–ò–¢–ò–ß–ù–û: backend/.env.example –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// 4. –ü–†–û–í–ï–†–ö–ê –ñ–ï–°–¢–ö–û –ü–†–û–ü–ò–°–ê–ù–ù–´–• –°–ï–ö–†–ï–¢–û–í –í –ö–û–î–ï
console.log('');
console.log('üîç === –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ö–û–î–ê –ù–ê –°–ï–ö–†–ï–¢–´ ===');

function scanFileForSecrets(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf-8');
        
        const secretPatterns = [
            { name: 'API Key', pattern: /api[_-]?key\s*[:=]\s*['"'][^'"]{10,}['"']/i },
            { name: 'Secret Key', pattern: /secret[_-]?key\s*[:=]\s*['"'][^'"]{10,}['"']/i },
            { name: 'Password', pattern: /password\s*[:=]\s*['"'][^'"]{5,}['"']/i },
            { name: 'Token', pattern: /token\s*[:=]\s*['"'][^'"]{20,}['"']/i },
            { name: 'Database URL', pattern: /database[_-]?url\s*[:=]\s*['"'].*:\/\/.*['"']/i },
        ];

        for (const { name, pattern } of secretPatterns) {
            if (pattern.test(content)) {
                logWarning(`–í–æ–∑–º–æ–∂–Ω—ã–π ${name} –Ω–∞–π–¥–µ–Ω –≤ ${filePath}`);
            }
        }
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    }
}

// –°–∫–∞–Ω–∏—Ä—É–µ–º JavaScript —Ñ–∞–π–ª—ã
function scanDirectory(dir, extensions = ['.js', '.ts', '.json']) {
    try {
        const files = fs.readdirSync(dir);
        
        for (const file of files) {
            const filePath = path.join(dir, file);
            const stat = fs.statSync(filePath);
            
            if (stat.isDirectory() && !file.includes('node_modules') && !file.includes('.git')) {
                scanDirectory(filePath, extensions);
            } else if (extensions.some(ext => file.endsWith(ext))) {
                scanFileForSecrets(filePath);
            }
        }
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    }
}

scanDirectory('backend');
scanDirectory('frontend');

// 5. –ü–†–û–í–ï–†–ö–ê PACKAGE.JSON –ù–ê –£–Ø–ó–í–ò–ú–û–°–¢–ò
console.log('');
console.log('üì¶ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ===');

const packageJsonPaths = [
    'backend/package.json',
    'frontend/package.json'
];

for (const packagePath of packageJsonPaths) {
    if (fs.existsSync(packagePath)) {
        try {
            const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf-8'));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
            if (packageJson.scripts) {
                logSuccess(`${packagePath}: package.json –≤–∞–ª–∏–¥–µ–Ω`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
            
            const securityPackages = ['helmet', 'cors', 'express-rate-limit'];
            let hasSecurityPackages = false;
            
            for (const pkg of securityPackages) {
                if (dependencies[pkg]) {
                    hasSecurityPackages = true;
                    break;
                }
            }

            if (hasSecurityPackages) {
                logSuccess(`${packagePath}: –ù–∞–π–¥–µ–Ω—ã security –ø–∞–∫–µ—Ç—ã`);
            } else {
                logWarning(`${packagePath}: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å security –ø–∞–∫–µ—Ç—ã`);
            }

        } catch (error) {
            logError(`${packagePath}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON`);
        }
    }
}

// 6. –ü–†–û–í–ï–†–ö–ê DOCKER –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
console.log('');
console.log('üê≥ === –ü–†–û–í–ï–†–ö–ê DOCKER –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===');

if (fs.existsSync('docker-compose.yml')) {
    const dockerContent = fs.readFileSync('docker-compose.yml', 'utf-8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥ –ø–∞—Ä–æ–ª–µ–π
    if (!dockerContent.includes('password:') || dockerContent.includes('${')) {
        logSuccess('Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ');
    } else {
        logWarning('Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–∞—Ä–¥–∫–æ–¥ –ø–∞—Ä–æ–ª–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º volumes
    if (dockerContent.includes('volumes:')) {
        logSuccess('Docker volumes –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º health checks
    if (dockerContent.includes('healthcheck:')) {
        logSuccess('Docker health checks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    } else {
        logWarning('Docker health checks –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

} else {
    logWarning('docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê README
console.log('');
console.log('üìñ === –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò ===');

if (fs.existsSync('README.md')) {
    const readmeContent = fs.readFileSync('README.md', 'utf-8');
    
    if (readmeContent.includes('## üîí') || readmeContent.includes('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')) {
        logSuccess('README —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    } else {
        logWarning('README –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    }

    if (readmeContent.includes('.env.example')) {
        logSuccess('README —É–ø–æ–º–∏–Ω–∞–µ—Ç .env.example');
    } else {
        logWarning('README –Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É .env.example');
    }
} else {
    logError('README.md –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
}

// 8. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
console.log('');
console.log('üîí === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:`);
console.log(`   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${securityIssues}`);
console.log(`   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warnings}`);

if (securityIssues === 0 && warnings === 0) {
    console.log('');
    console.log('üéâ –û–¢–õ–ò–ß–ù–û! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ GitHub');
    console.log('‚úÖ –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
} else if (securityIssues === 0) {
    console.log('');
    console.log('‚ö†Ô∏è  –£–°–õ–û–í–ù–û –ì–û–¢–û–í –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    console.log('‚ùó –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è');
} else {
    console.log('');
    console.log('üö® –ù–ï –ì–û–¢–û–í –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!');
    console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    console.log('üõë –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π');
}

console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

// 9. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
console.log('');
console.log('üí° === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–ï–†–ï–î –ü–£–ë–õ–ò–ö–ê–¶–ò–ï–ô ===');

console.log('');
console.log('üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:');
console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend/.env –ù–ï –≤ Git');
console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ backend/.env.example —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ placeholders');
console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ .gitignore –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
console.log('4. –£–¥–∞–ª–∏—Ç–µ –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ –∏–∑ –∫–æ–¥–∞');

console.log('');
console.log('üîí –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:');
console.log('1. –î–æ–±–∞–≤—å—Ç–µ rate limiting –≤ production');
console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ HTTPS –¥–ª—è –≤—Å–µ—Ö API endpoints');
console.log('3. –î–æ–±–∞–≤—å—Ç–µ input validation');
console.log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');

console.log('');
console.log('üöÄ –ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Git:');
console.log('git add .');
console.log('git commit -m "feat: production-ready loyalty app"');
console.log('git push origin main');

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
process.exit(securityIssues > 0 ? 1 : 0);
