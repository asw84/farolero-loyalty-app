import { validator } from '../../core/validator/validator.js';
import { isNumber, isRequired } from '../../core/validator/rules.js';
import { Widget } from '../../core/widget/widget.js';
import '../../core/widget/events.js';
import { Languages, Scheme } from '../../types.js';
import { COMMUNITY_SUBSCRIPTION_ERROR_TEXT } from './constants.js';
import { CommunitySubscriptionEvents, CommunitySubscriptionInternalEvents } from './events.js';
import { getCommunitySubscriptionTemplate } from './template.js';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function _ts_decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
class CommunitySubscription extends Widget {
    vkidAppName = 'community_subscription';
    limitDisplayLocalStorageObjName = 'vkid_community_subscription:limit_display';
    accessToken;
    groupId;
    constructor(){
        super();
    }
    onBridgeMessageHandler(event) {
        switch(event.handler){
            case CommunitySubscriptionEvents.Error:
                {
                    if (event.params.code) {
                        this.events.emit(CommunitySubscriptionEvents.Error, {
                            ...event.params,
                            error: COMMUNITY_SUBSCRIPTION_ERROR_TEXT[event.params.code]
                        });
                    }
                    this.close();
                    break;
                }
            case CommunitySubscriptionEvents.Success:
                {
                    this.events.emit(CommunitySubscriptionEvents.Success, event.params);
                    this.elements.iframe.style.pointerEvents = 'none';
                    break;
                }
            case CommunitySubscriptionInternalEvents.Ready:
                {
                    this.bridge.sendMessage({
                        handler: CommunitySubscriptionInternalEvents.Data,
                        params: {
                            accessToken: this.accessToken,
                            groupId: this.groupId
                        }
                    });
                    break;
                }
            case CommunitySubscriptionEvents.Load:
                {
                    // Проверка по значению из Localstorage, показывали ли ранее
                    try {
                        const periodInDays = this.config.get().groupSubscriptionsLimit?.periodInDays ?? 30;
                        const maxSubscriptionsToShow = this.config.get().groupSubscriptionsLimit?.maxSubscriptionsToShow ?? 2;
                        const result = localStorage.getItem(`${this.limitDisplayLocalStorageObjName}`);
                        const data = result && JSON.parse(result);
                        const dateArray = data.filter((date)=>this.checkForPeriodEntry(new Date(date), new Date(), periodInDays));
                        if (dateArray.length < maxSubscriptionsToShow) {
                            localStorage.setItem(this.limitDisplayLocalStorageObjName, JSON.stringify([
                                ...dateArray,
                                new Date()
                            ]));
                        } else {
                            break;
                        }
                    } catch (e) {
                        // Первый раз будет ошибка - так как еще нет записи в Localstorage - поэтому значение устанавливаем после отлова ошибки
                        if (this.config.get().groupSubscriptionsLimit?.maxSubscriptionsToShow?.toString() === '0') {
                            break;
                        }
                        localStorage.setItem(this.limitDisplayLocalStorageObjName, JSON.stringify([
                            new Date()
                        ]));
                    }
                    super.onBridgeMessageHandler(event);
                    break;
                }
            default:
                {
                    super.onBridgeMessageHandler(event);
                    break;
                }
        }
    }
    checkForPeriodEntry(dateDisplay, dateActual, period) {
        let result = new Date(dateDisplay);
        result.setDate(result.getDate() + period);
        return result.getTime() > dateActual.getTime();
    }
    render(params) {
        this.lang = params?.lang || Languages.RUS;
        this.scheme = params?.scheme || Scheme.LIGHT;
        this.accessToken = params.accessToken;
        this.groupId = params.groupId;
        this.container = document.body;
        this.templateRenderer = getCommunitySubscriptionTemplate();
        super.render({
            container: this.container,
            lang: this.lang,
            scheme: this.scheme
        });
        return this;
    }
}
_ts_decorate([
    validator({
        groupId: [
            isNumber
        ],
        accessToken: [
            isRequired
        ]
    })
], CommunitySubscription.prototype, "render", null);

export { CommunitySubscription };
