'use strict';

var validator = require('../../core/validator/validator.js');
var rules = require('../../core/validator/rules.js');
var widget = require('../../core/widget/widget.js');
require('../../core/widget/events.js');
var types = require('../../types.js');
var constants = require('./constants.js');
var events = require('./events.js');
var template = require('./template.js');

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
var CommunitySubscription = /*#__PURE__*/ function(Widget) {
    _inherits(CommunitySubscription, Widget);
    var _super = _create_super(CommunitySubscription);
    function CommunitySubscription() {
        _class_call_check(this, CommunitySubscription);
        var _this;
        _this = _super.call(this);
        _define_property(_assert_this_initialized(_this), "vkidAppName", "community_subscription");
        _define_property(_assert_this_initialized(_this), "limitDisplayLocalStorageObjName", "vkid_community_subscription:limit_display");
        _define_property(_assert_this_initialized(_this), "accessToken", void 0);
        _define_property(_assert_this_initialized(_this), "groupId", void 0);
        return _this;
    }
    _create_class(CommunitySubscription, [
        {
            key: "onBridgeMessageHandler",
            value: function onBridgeMessageHandler(event) {
                var _this = this;
                switch(event.handler){
                    case events.CommunitySubscriptionEvents.Error:
                        {
                            if (event.params.code) {
                                this.events.emit(events.CommunitySubscriptionEvents.Error, _object_spread_props(_object_spread({}, event.params), {
                                    error: constants.COMMUNITY_SUBSCRIPTION_ERROR_TEXT[event.params.code]
                                }));
                            }
                            this.close();
                            break;
                        }
                    case events.CommunitySubscriptionEvents.Success:
                        {
                            this.events.emit(events.CommunitySubscriptionEvents.Success, event.params);
                            this.elements.iframe.style.pointerEvents = "none";
                            break;
                        }
                    case events.CommunitySubscriptionInternalEvents.Ready:
                        {
                            this.bridge.sendMessage({
                                handler: events.CommunitySubscriptionInternalEvents.Data,
                                params: {
                                    accessToken: this.accessToken,
                                    groupId: this.groupId
                                }
                            });
                            break;
                        }
                    case events.CommunitySubscriptionEvents.Load:
                        {
                            // Проверка по значению из Localstorage, показывали ли ранее
                            try {
                                var _this_config_get_groupSubscriptionsLimit, _this_config_get_groupSubscriptionsLimit1;
                                var _this_config_get_groupSubscriptionsLimit_periodInDays;
                                var periodInDays = (_this_config_get_groupSubscriptionsLimit_periodInDays = (_this_config_get_groupSubscriptionsLimit = this.config.get().groupSubscriptionsLimit) === null || _this_config_get_groupSubscriptionsLimit === void 0 ? void 0 : _this_config_get_groupSubscriptionsLimit.periodInDays) !== null && _this_config_get_groupSubscriptionsLimit_periodInDays !== void 0 ? _this_config_get_groupSubscriptionsLimit_periodInDays : 30;
                                var _this_config_get_groupSubscriptionsLimit_maxSubscriptionsToShow;
                                var maxSubscriptionsToShow = (_this_config_get_groupSubscriptionsLimit_maxSubscriptionsToShow = (_this_config_get_groupSubscriptionsLimit1 = this.config.get().groupSubscriptionsLimit) === null || _this_config_get_groupSubscriptionsLimit1 === void 0 ? void 0 : _this_config_get_groupSubscriptionsLimit1.maxSubscriptionsToShow) !== null && _this_config_get_groupSubscriptionsLimit_maxSubscriptionsToShow !== void 0 ? _this_config_get_groupSubscriptionsLimit_maxSubscriptionsToShow : 2;
                                var result = localStorage.getItem("".concat(this.limitDisplayLocalStorageObjName));
                                var data = result && JSON.parse(result);
                                var dateArray = data.filter(function(date) {
                                    return _this.checkForPeriodEntry(new Date(date), new Date(), periodInDays);
                                });
                                if (dateArray.length < maxSubscriptionsToShow) {
                                    localStorage.setItem(this.limitDisplayLocalStorageObjName, JSON.stringify(_to_consumable_array(dateArray).concat([
                                        new Date()
                                    ])));
                                } else {
                                    break;
                                }
                            } catch (e) {
                                var _this_config_get_groupSubscriptionsLimit_maxSubscriptionsToShow1, _this_config_get_groupSubscriptionsLimit2;
                                // Первый раз будет ошибка - так как еще нет записи в Localstorage - поэтому значение устанавливаем после отлова ошибки
                                if (((_this_config_get_groupSubscriptionsLimit2 = this.config.get().groupSubscriptionsLimit) === null || _this_config_get_groupSubscriptionsLimit2 === void 0 ? void 0 : (_this_config_get_groupSubscriptionsLimit_maxSubscriptionsToShow1 = _this_config_get_groupSubscriptionsLimit2.maxSubscriptionsToShow) === null || _this_config_get_groupSubscriptionsLimit_maxSubscriptionsToShow1 === void 0 ? void 0 : _this_config_get_groupSubscriptionsLimit_maxSubscriptionsToShow1.toString()) === "0") {
                                    break;
                                }
                                localStorage.setItem(this.limitDisplayLocalStorageObjName, JSON.stringify([
                                    new Date()
                                ]));
                            }
                            _get(_get_prototype_of(CommunitySubscription.prototype), "onBridgeMessageHandler", this).call(this, event);
                            break;
                        }
                    default:
                        {
                            _get(_get_prototype_of(CommunitySubscription.prototype), "onBridgeMessageHandler", this).call(this, event);
                            break;
                        }
                }
            }
        },
        {
            key: "checkForPeriodEntry",
            value: function checkForPeriodEntry(dateDisplay, dateActual, period) {
                var result = new Date(dateDisplay);
                result.setDate(result.getDate() + period);
                return result.getTime() > dateActual.getTime();
            }
        },
        {
            key: "render",
            value: function render(params) {
                var _params, _params1;
                this.lang = ((_params = params) === null || _params === void 0 ? void 0 : _params.lang) || types.Languages.RUS;
                this.scheme = ((_params1 = params) === null || _params1 === void 0 ? void 0 : _params1.scheme) || types.Scheme.LIGHT;
                this.accessToken = params.accessToken;
                this.groupId = params.groupId;
                this.container = document.body;
                this.templateRenderer = template.getCommunitySubscriptionTemplate();
                _get(_get_prototype_of(CommunitySubscription.prototype), "render", this).call(this, {
                    container: this.container,
                    lang: this.lang,
                    scheme: this.scheme
                });
                return this;
            }
        }
    ]);
    return CommunitySubscription;
}(widget.Widget);
_ts_decorate([
    validator.validator({
        groupId: [
            rules.isNumber
        ],
        accessToken: [
            rules.isRequired
        ]
    })
], CommunitySubscription.prototype, "render", null);

exports.CommunitySubscription = CommunitySubscription;
