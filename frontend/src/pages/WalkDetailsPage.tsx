// frontend/src/pages/WalkDetailsPage.tsx
// –ß–ò–°–¢–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ë–ï–ó –ë–ï–°–ö–û–ù–ï–ß–ù–´–• –¶–ò–ö–õ–û–í

import { useEffect, useState, useCallback, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useTelegram } from '../hooks/useTelegram';
import { fetchWalkById, createOrder } from '../api';
import { useUser } from '../hooks/useUser';

interface WalkDetails {
  id: number;
  city: string;
  title: string;
  price: number;
  description: string;
  duration: string;
}

const WalkDetailsPage = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { tg } = useTelegram();
  const { userData, loading: userLoading } = useUser();
  const { telegramId, points } = userData;
  const [usePoints, setUsePoints] = useState(false);
  const [walk, setWalk] = useState<WalkDetails | null>(null);
  const [walkLoading, setWalkLoading] = useState(true);

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const walkId = useMemo(() => id, [id]);
  const stableTelegramId = useMemo(() => telegramId, [telegramId]);

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–∫–∏
  const loadWalkData = useCallback(async () => {
    if (!walkId) return;

    try {
      console.log(`[WalkDetailsPage] üö∂ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–≥—É–ª–∫—É ID: ${walkId}`);
      setWalkLoading(true);
      const data = await fetchWalkById(walkId);
      setWalk(data);
      console.log('[WalkDetailsPage] ‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
      console.error('[WalkDetailsPage] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—É–ª–∫–∏:', error);
    } finally {
      setWalkLoading(false);
    }
  }, [walkId]);

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏
  const handlePurchase = useCallback(async () => {
    if (!walk || !stableTelegramId || !walkId) {
      console.log('[WalkDetailsPage] ‚ö†Ô∏è –û—Ç–º–µ–Ω—è—é –ø–æ–∫—É–ø–∫—É - –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    console.log('[WalkDetailsPage] üí≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏');
    tg.MainButton.showProgress();
    
    try {
      const orderResponse = await createOrder(stableTelegramId, walkId, usePoints);
      
      if (orderResponse && orderResponse.orderUrl) {
        console.log('[WalkDetailsPage] ‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞—é —Å—Å—ã–ª–∫—É');
        tg.openLink(orderResponse.orderUrl);
      } else {
        console.log('[WalkDetailsPage] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑');
        tg.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.');
      }
    } catch (error) {
      console.error('[WalkDetailsPage] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.');
    } finally {
      tg.MainButton.hideProgress();
    }
  }, [walk, stableTelegramId, walkId, usePoints, tg]);

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
  const handleGoBack = useCallback(() => {
    console.log('[WalkDetailsPage] ‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞–∑–∞–¥');
    navigate(-1);
  }, [navigate]);

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
  const finalPrice = useMemo(() => {
    if (!walk) return 0;
    return usePoints ? Math.max(0, walk.price - (points || 0)) : walk.price;
  }, [walk, usePoints, points]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–∫–∏
  useEffect(() => {
    loadWalkData();
  }, [loadWalkData]);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π Telegram
  useEffect(() => {
    console.log('[WalkDetailsPage] üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Å–æ–±—ã—Ç–∏—è Telegram');
    
    tg.onEvent('mainButtonClicked', handlePurchase);
    tg.onEvent('backButtonClicked', handleGoBack);
    tg.BackButton.show();

    return () => {
      console.log('[WalkDetailsPage] üßπ –û—á–∏—â–∞—é —Å–æ–±—ã—Ç–∏—è Telegram');
      tg.offEvent('mainButtonClicked', handlePurchase);
      tg.offEvent('backButtonClicked', handleGoBack);
      tg.MainButton.hide();
      tg.BackButton.hide();
    };
  }, [tg, handlePurchase, handleGoBack]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
  useEffect(() => {
    if (walk && stableTelegramId) {
      const buttonText = `–ö—É–ø–∏—Ç—å –∑–∞ ${finalPrice} —Ä—É–±.`;
      console.log(`[WalkDetailsPage] üîò –û–±–Ω–æ–≤–ª—è—é –∫–Ω–æ–ø–∫—É: "${buttonText}"`);
      tg.MainButton.setText(buttonText);
      tg.MainButton.show();
    } else {
      console.log('[WalkDetailsPage] üîò –°–∫—Ä—ã–≤–∞—é –∫–Ω–æ–ø–∫—É - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      tg.MainButton.hide();
    }
  }, [walk, stableTelegramId, finalPrice, tg]);

  if (walkLoading || userLoading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</div>;
  }
  if (!walk) {
    return <div>–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</div>;
  }

  return (
    <div style={{ padding: '10px' }}>
      <h1>{walk.title}</h1>
      <p><strong>–ì–æ—Ä–æ–¥:</strong> {walk.city}</p>
      <p><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> {walk.duration}</p>
      <hr />
      <p>{walk.description}</p>
      <hr />
      <div>
        <label>
          <input type="checkbox" checked={usePoints} onChange={(e) => setUsePoints(e.target.checked)} />
          –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {points} –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–∫–∏–¥–∫–∏
        </label>
      </div>
    </div>
  );
};

export default WalkDetailsPage;
