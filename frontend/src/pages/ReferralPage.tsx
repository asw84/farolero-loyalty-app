// frontend/src/pages/ReferralPage.tsx
// –ß–ò–°–¢–ê–Ø –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –ë–ï–ó –ë–ï–°–ö–û–ù–ï–ß–ù–´–• –¶–ò–ö–õ–û–í

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useTelegram } from '../hooks/useTelegram';
import './ReferralPage.css';

// API Base URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const API_BASE_URL = import.meta.env.VITE_API_URL || 'https://api.5425685-au70735.twc1.net';

interface ReferralStats {
  referralCode: string | null;
  totalReferrals: number;
  totalEarned: number;
  recentReferrals: Array<{
    referee_telegram_id: string;
    activated_at: string;
    bonus_amount: number;
  }>;
}

interface QRCodeResponse {
  success: boolean;
  qrCode: string;
  referralUrl: string;
}

const ReferralPage: React.FC = () => {
  const { user } = useTelegram();
  const [stats, setStats] = useState<ReferralStats | null>(null);
  const [qrCode, setQrCode] = useState<string | null>(null);
  const [referralUrl, setReferralUrl] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>('');
  const [copySuccess, setCopySuccess] = useState(false);

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ telegramId
  const telegramId = useMemo(() => user?.id, [user?.id]);

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ useCallback –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
  const loadQRCode = useCallback(async (referralCode: string) => {
    try {
      console.log(`[ReferralPage] üì± –ó–∞–≥—Ä—É–∂–∞—é QR-–∫–æ–¥ –¥–ª—è: ${referralCode}`);
      const response = await fetch(`${API_BASE_URL}/api/referral/qr/${referralCode}?style=styled`);
      const data: QRCodeResponse = await response.json();

      if (data.success) {
        setQrCode(data.qrCode);
        console.log('[ReferralPage] ‚úÖ QR-–∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω');
      } else {
        console.warn('[ReferralPage] ‚ö†Ô∏è QR-–∫–æ–¥ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å');
      }
    } catch (err) {
      console.error('[ReferralPage] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞:', err);
    }
  }, []); // üîß –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (–ë–ï–ó —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞)
  const generateReferralCode = useCallback(async () => {
    if (!telegramId) return null;

    try {
      console.log('[ReferralPage] üîó –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥');
      const response = await fetch(`${API_BASE_URL}/api/referral/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telegramId }),
      });

      const data = await response.json();

      if (data.success) {
        const newReferralUrl = `https://t.me/farolero_bot?start=ref_${data.referralCode}`;
        setReferralUrl(newReferralUrl);
        await loadQRCode(data.referralCode);
        console.log('[ReferralPage] ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        return {
          referralCode: data.referralCode,
          totalReferrals: 0,
          totalEarned: 0,
          recentReferrals: []
        };
      } else {
        setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
        return null;
      }
    } catch (err) {
      console.error('[ReferralPage] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:', err);
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
      return null;
    }
  }, [telegramId, loadQRCode]);

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–ë–ï–ó —Ä–µ–∫—É—Ä—Å–∏–∏)
  const loadReferralData = useCallback(async () => {
    if (!telegramId) return;

    try {
      console.log(`[ReferralPage] üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è: ${telegramId}`);
      setLoading(true);
      setError('');

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const statsResponse = await fetch(`${API_BASE_URL}/api/referral/stats/${telegramId}`);
      const statsData = await statsResponse.json();

      if (statsData.success) {
        const referralStats = statsData.stats;
        setStats(referralStats);

        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–¥–∞, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if (!referralStats.referralCode) {
          console.log('[ReferralPage] üÜï –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π');
          const newStats = await generateReferralCode();
          if (newStats) {
            setStats({ ...referralStats, ...newStats });
          }
        } else {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º QR-–∫–æ–¥
          const existingUrl = `https://t.me/farolero_bot?start=ref_${referralStats.referralCode}`;
          setReferralUrl(existingUrl);
          await loadQRCode(referralStats.referralCode);
          console.log('[ReferralPage] ‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (err) {
      console.error('[ReferralPage] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
      setLoading(false);
    }
  }, [generateReferralCode, loadQRCode]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
  const retryLoad = useCallback(() => {
    if (telegramId) {
      setStats(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º stats –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      loadReferralData();
    }
  }, [telegramId, loadReferralData]);

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: useEffect —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
  useEffect(() => {
    if (telegramId && !stats) { // üîß –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É !stats –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
      loadReferralData();
    }
  }, [telegramId]); // üîß –£–ë–ò–†–ê–ï–ú loadReferralData –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyToClipboard = useCallback(async () => {
    try {
      await navigator.clipboard.writeText(referralUrl);
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
      console.log('[ReferralPage] üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    } catch (err) {
      console.error('[ReferralPage] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
    }
  }, [referralUrl]);

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
  const shareReferralLink = useCallback(() => {
    if (navigator.share) {
      navigator.share({
        title: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Farolero!',
        text: '–ü–æ–ª—É—á–∏ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ!',
        url: referralUrl,
      });
      console.log('[ReferralPage] üì§ –í—ã–∑–≤–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"');
    } else {
      copyToClipboard();
    }
  }, [referralUrl, copyToClipboard]);

  if (loading) {
    return (
      <div className="referral-page">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...</p>
          <small>Telegram ID: {telegramId || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</small>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="referral-page">
        <div className="error-message">
          <h3>–û—à–∏–±–∫–∞</h3>
          <p>{error}</p>
          <button onClick={retryLoad} className="retry-button">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
          <small>Debug: Telegram ID = {telegramId}</small>
        </div>
      </div>
    );
  }

  return (
    <div className="referral-page">
      <div className="referral-header">
        <h1>üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</h1>
        <p>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã!</p>
      </div>

      <div className="referral-stats">
        <div className="stat-card">
          <div className="stat-number">{stats?.totalReferrals || 0}</div>
          <div className="stat-label">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">{stats?.totalEarned || 0}</div>
          <div className="stat-label">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤</div>
        </div>
      </div>

      <div className="referral-share">
        <h3>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</h3>
        
        {qrCode && (
          <div className="qr-code-container">
            <img src={qrCode} alt="QR –∫–æ–¥ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏" className="qr-code" />
            <p className="qr-hint">–ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –¥—Ä—É–∑—å—è–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞</p>
          </div>
        )}

        <div className="link-container">
          <input 
            type="text" 
            value={referralUrl} 
            readOnly 
            className="referral-link-input"
          />
          <button 
            onClick={copyToClipboard} 
            className={`copy-button ${copySuccess ? 'success' : ''}`}
          >
            {copySuccess ? '‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ' : 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
          </button>
        </div>

        <button onClick={shareReferralLink} className="share-button">
          üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
        </button>
      </div>

      <div className="referral-info">
        <h3>üí∞ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</h3>
        <div className="info-steps">
          <div className="step">
            <div className="step-number">1</div>
            <div className="step-text">
              <strong>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π</strong><br />
              –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            </div>
          </div>
          <div className="step">
            <div className="step-number">2</div>
            <div className="step-text">
              <strong>–î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è</strong><br />
              –í–∞—à –¥—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
            </div>
          </div>
          <div className="step">
            <div className="step-number">3</div>
            <div className="step-text">
              <strong>–ü–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å—ã</strong><br />
              –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 50 –±–∞–ª–ª–æ–≤, –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç 20 –±–∞–ª–ª–æ–≤
            </div>
          </div>
        </div>
      </div>

      {stats?.recentReferrals && stats.recentReferrals.length > 0 && (
        <div className="recent-referrals">
          <h3>üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</h3>
          <div className="referrals-list">
            {stats.recentReferrals.map((referral, index) => (
              <div key={index} className="referral-item">
                <div className="referral-user">
                  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{referral.referee_telegram_id.slice(-4)}
                </div>
                <div className="referral-date">
                  {new Date(referral.activated_at).toLocaleDateString('ru-RU')}
                </div>
                <div className="referral-bonus">
                  +{referral.bonus_amount} –±–∞–ª–ª–æ–≤
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ReferralPage;