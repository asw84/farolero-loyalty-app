// backend/tests/api.test.js
// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã API endpoints

const request = require('supertest');
const app = require('../server');

describe('üî• API Endpoints Testing', () => {

    // === HEALTHCHECK TESTS ===
    describe('ü©∫ Health Check', () => {
        test('GET /health –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç—É—Å OK', async () => {
            const response = await request(app)
                .get('/health')
                .expect(200);
            
            expect(response.body).toHaveProperty('status', 'OK');
            expect(response.body).toHaveProperty('timestamp');
        });
    });

    // === DATABASE TESTS ===
    describe('üíæ Database Connection', () => {
        test('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞', async () => {
            const response = await request(app)
                .get('/api/test/db')
                .expect(200);
            
            expect(response.body.success).toBe(true);
        });
    });

    // === USER MANAGEMENT TESTS ===
    describe('üë§ User Management', () => {
        const testUser = {
            telegram_user_id: 'test_' + Date.now(),
            username: 'testuser',
            first_name: 'Test',
            last_name: 'User'
        };

        test('POST /api/users - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
            const response = await request(app)
                .post('/api/users')
                .send(testUser)
                .expect(201);
            
            expect(response.body.success).toBe(true);
            expect(response.body.user).toHaveProperty('telegram_user_id', testUser.telegram_user_id);
        });

        test('GET /api/users/:id - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
            const response = await request(app)
                .get(`/api/users/${testUser.telegram_user_id}`)
                .expect(200);
            
            expect(response.body.success).toBe(true);
            expect(response.body.user).toHaveProperty('telegram_user_id', testUser.telegram_user_id);
        });

        test('PUT /api/users/:id - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
            const updateData = { first_name: 'Updated Test' };
            
            const response = await request(app)
                .put(`/api/users/${testUser.telegram_user_id}`)
                .send(updateData)
                .expect(200);
            
            expect(response.body.success).toBe(true);
        });
    });

    // === REFERRAL SYSTEM TESTS ===
    describe('üéØ Referral System', () => {
        const referrerTelegramId = 'referrer_' + Date.now();
        let referralCode;

        beforeAll(async () => {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            await request(app)
                .post('/api/users')
                .send({
                    telegram_user_id: referrerTelegramId,
                    username: 'referrer',
                    first_name: 'Referrer',
                    last_name: 'User'
                });
        });

        test('POST /api/referral/generate - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞', async () => {
            const response = await request(app)
                .post('/api/referral/generate')
                .send({ telegram_id: referrerTelegramId })
                .expect(201);
            
            expect(response.body.success).toBe(true);
            expect(response.body).toHaveProperty('referral_code');
            expect(response.body).toHaveProperty('qr_code');
            
            referralCode = response.body.referral_code;
        });

        test('GET /api/referral/stats/:telegram_id - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', async () => {
            const response = await request(app)
                .get(`/api/referral/stats/${referrerTelegramId}`)
                .expect(200);
            
            expect(response.body.success).toBe(true);
            expect(response.body.stats).toHaveProperty('total_referrals');
            expect(response.body.stats).toHaveProperty('active_referrals');
        });

        test('POST /api/referral/activate - –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞', async () => {
            const refereeTelegramId = 'referee_' + Date.now();
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            await request(app)
                .post('/api/users')
                .send({
                    telegram_user_id: refereeTelegramId,
                    username: 'referee',
                    first_name: 'Referee',
                    last_name: 'User'
                });

            const response = await request(app)
                .post('/api/referral/activate')
                .send({
                    referral_code: referralCode,
                    referee_telegram_id: refereeTelegramId
                })
                .expect(200);
            
            expect(response.body.success).toBe(true);
        });
    });

    // === RFM ANALYTICS TESTS ===
    describe('üìä RFM Analytics', () => {
        test('GET /api/analytics/rfm - –ø–æ–ª—É—á–µ–Ω–∏–µ RFM —Å–µ–≥–º–µ–Ω—Ç–æ–≤', async () => {
            const response = await request(app)
                .get('/api/analytics/rfm')
                .expect(200);
            
            expect(response.body.success).toBe(true);
            expect(Array.isArray(response.body.segments)).toBe(true);
        });

        test('POST /api/analytics/rfm/calculate - –ø–µ—Ä–µ—Å—á–µ—Ç RFM', async () => {
            const response = await request(app)
                .post('/api/analytics/rfm/calculate')
                .expect(200);
            
            expect(response.body.success).toBe(true);
        });

        test('GET /api/analytics/dashboard - –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞', async () => {
            const response = await request(app)
                .get('/api/analytics/dashboard')
                .expect(200);
            
            expect(response.body.success).toBe(true);
            expect(response.body).toHaveProperty('total_users');
            expect(response.body).toHaveProperty('total_referrals');
        });
    });

    // === AUTH SYSTEM TESTS ===
    describe('üîê Authentication System', () => {
        test('GET /auth/setup - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è', async () => {
            const response = await request(app)
                .get('/auth/setup')
                .expect(200);
            
            expect(response.text).toContain('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AmoCRM');
        });

        test('POST /auth/save-code - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async () => {
            const response = await request(app)
                .post('/auth/save-code')
                .send({ authCode: 'test_auth_code_123' })
                .expect(200);
            
            expect(response.body.success).toBe(true);
        });

        test('GET /auth/show-tokens - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–∫–µ–Ω–æ–≤', async () => {
            const response = await request(app)
                .get('/auth/show-tokens')
                .expect(200);
            
            expect(response.body).toHaveProperty('success');
        });
    });

    // === ORDER PROCESSING TESTS ===
    describe('üõí Order Processing', () => {
        test('POST /api/orders - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', async () => {
            const orderData = {
                user_telegram_id: 'test_user_' + Date.now(),
                amount: 1000,
                source: 'qtickets',
                order_id: 'test_order_' + Date.now()
            };

            const response = await request(app)
                .post('/api/orders')
                .send(orderData)
                .expect(201);
            
            expect(response.body.success).toBe(true);
        });
    });

    // === ERROR HANDLING TESTS ===
    describe('‚ùå Error Handling', () => {
        test('GET /nonexistent - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 404', async () => {
            await request(app)
                .get('/nonexistent')
                .expect(404);
        });

        test('POST /api/users - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 400', async () => {
            await request(app)
                .post('/api/users')
                .send({}) // –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
                .expect(400);
        });

        test('GET /api/users/nonexistent - –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 404', async () => {
            await request(app)
                .get('/api/users/nonexistent_user_id')
                .expect(404);
        });
    });

    // === PERFORMANCE TESTS ===
    describe('‚ö° Performance Tests', () => {
        test('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å < 1000ms', async () => {
            const start = Date.now();
            
            await request(app)
                .get('/health')
                .expect(200);
            
            const responseTime = Date.now() - start;
            expect(responseTime).toBeLessThan(1000);
        });

        test('–ú–∞—Å—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ', async () => {
            const promises = [];
            
            for (let i = 0; i < 10; i++) {
                promises.push(
                    request(app)
                        .get('/health')
                        .expect(200)
                );
            }
            
            const results = await Promise.all(promises);
            expect(results).toHaveLength(10);
        });
    });
});

// === INTEGRATION TESTS ===
describe('üîó Integration Tests', () => {
    describe('AmoCRM Integration', () => {
        test('GET /api/amocrm/test - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM', async () => {
            const response = await request(app)
                .get('/api/amocrm/test')
                .timeout(5000);
            
            // –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ —É—Å–ø–µ—Ö, —Ç–∞–∫ –∏ –æ—à–∏–±–∫—É (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
            expect([200, 401, 500]).toContain(response.status);
        });
    });

    describe('Database Consistency', () => {
        test('–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π CRUD', async () => {
            const testUserId = 'consistency_test_' + Date.now();
            
            // CREATE
            await request(app)
                .post('/api/users')
                .send({
                    telegram_user_id: testUserId,
                    username: 'consistencytest',
                    first_name: 'Consistency',
                    last_name: 'Test'
                })
                .expect(201);
            
            // READ
            const readResponse = await request(app)
                .get(`/api/users/${testUserId}`)
                .expect(200);
            
            expect(readResponse.body.user.telegram_user_id).toBe(testUserId);
            
            // UPDATE
            await request(app)
                .put(`/api/users/${testUserId}`)
                .send({ first_name: 'Updated' })
                .expect(200);
            
            // VERIFY UPDATE
            const updatedResponse = await request(app)
                .get(`/api/users/${testUserId}`)
                .expect(200);
            
            expect(updatedResponse.body.user.first_name).toBe('Updated');
        });
    });
});