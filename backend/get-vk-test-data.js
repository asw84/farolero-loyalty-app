// backend/get-vk-test-data.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VK API

require('dotenv').config();
const axios = require('axios');

console.log('üîµ === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø VK ===');
console.log('üìÖ', new Date().toLocaleString());
console.log('');

const VK_ACCESS_TOKEN = process.env.VK_ACCESS_TOKEN;
const VK_GROUP_TOKEN = process.env.VK_GROUP_TOKEN;
const VK_SERVICE_KEY = process.env.VK_SERVICE_KEY;
const VK_GROUP_ID = process.env.VK_GROUP_ID;

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
async function getGroupInfo() {
    try {
        console.log('üè¢ === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–†–£–ü–ü–ï ===');
        
        const token = VK_SERVICE_KEY || VK_GROUP_TOKEN || VK_ACCESS_TOKEN;
        if (!token) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }

        const response = await axios.get('https://api.vk.com/method/groups.getById', {
            params: {
                group_id: VK_GROUP_ID,
                access_token: token,
                v: '5.199'
            }
        });

        if (response.data.error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', response.data.error.error_msg);
            return;
        }

        const group = response.data.response[0];
        console.log(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: ${group.name}`);
        console.log(`‚úÖ ID –≥—Ä—É–ø–ø—ã: ${group.id}`);
        console.log(`‚úÖ Screen name: ${group.screen_name}`);
        console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${group.members_count}`);
        console.log(`‚úÖ URL: https://vk.com/${group.screen_name}`);
        
        return group;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ:', error.message);
    }
}

// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –≥—Ä—É–ø–ø—ã
async function getGroupPosts() {
    try {
        console.log('');
        console.log('üìù === –ü–û–°–¢–´ –ì–†–£–ü–ü–´ ===');
        
        const token = VK_GROUP_TOKEN || VK_ACCESS_TOKEN || VK_SERVICE_KEY;
        if (!token) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }

        const response = await axios.get('https://api.vk.com/method/wall.get', {
            params: {
                owner_id: `-${VK_GROUP_ID}`,
                count: 5,
                access_token: token,
                v: '5.199'
            }
        });

        if (response.data.error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', response.data.error.error_msg);
            return;
        }

        const posts = response.data.response.items;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤:`);
        
        posts.forEach((post, index) => {
            console.log(`\nüìÑ –ü–æ—Å—Ç ${index + 1}:`);
            console.log(`   ID: ${post.id}`);
            console.log(`   Owner ID: ${post.owner_id}`);
            console.log(`   –ü–æ–ª–Ω—ã–π ID: ${post.owner_id}_${post.id}`);
            console.log(`   –õ–∞–π–∫–æ–≤: ${post.likes?.count || 0}`);
            console.log(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${post.comments?.count || 0}`);
            console.log(`   –†–µ–ø–æ—Å—Ç–æ–≤: ${post.reposts?.count || 0}`);
            
            const text = post.text ? post.text.substring(0, 100) + '...' : '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞';
            console.log(`   –¢–µ–∫—Å—Ç: ${text}`);
            
            if (index === 0) {
                console.log(`\nüéØ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:`);
                console.log(`   ownerId: ${post.owner_id}`);
                console.log(`   postId: ${post.id}`);
            }
        });
        
        return posts;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:', error.message);
    }
}

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω)
async function getCurrentUser() {
    try {
        console.log('');
        console.log('üë§ === –¢–ï–ö–£–©–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ===');
        
        if (!VK_ACCESS_TOKEN) {
            console.log('‚ö†Ô∏è  VK_ACCESS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }

        const response = await axios.get('https://api.vk.com/method/users.get', {
            params: {
                access_token: VK_ACCESS_TOKEN,
                v: '5.199'
            }
        });

        if (response.data.error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', response.data.error.error_msg);
            return;
        }

        const user = response.data.response[0];
        console.log(`‚úÖ –ò–º—è: ${user.first_name} ${user.last_name}`);
        console.log(`‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}`);
        console.log(`‚úÖ URL: https://vk.com/id${user.id}`);
        
        console.log(`\nüéØ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ USER_VK_ID: ${user.id}`);
        
        return user;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    }
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function generateTestCommand(posts, user) {
    console.log('');
    console.log('üöÄ === –ö–û–ú–ê–ù–î–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    
    if (!posts || posts.length === 0) {
        console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
        return;
    }
    
    const post = posts[0];
    const userId = user?.id || '–í–ê–®_VK_ID';
    
    console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:');
    console.log('');
    console.log('```bash');
    console.log('cd backend');
    console.log('node test-vk-social-tracking.js --interactive');
    console.log('```');
    console.log('');
    console.log('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:');
    console.log(`- VK ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    console.log(`- ID –ø–æ—Å—Ç–∞: ${post.id}`);
    console.log('');
    
    if (userId === '–í–ê–®_VK_ID') {
        console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –í–ê–®_VK_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK');
        console.log('   –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –∑–¥–µ—Å—å: https://regvk.com/id/');
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ–∫–µ–Ω–æ–≤
function checkTokens() {
    console.log('üîß === –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–û–í ===');
    
    const tokens = {
        'VK_ACCESS_TOKEN': VK_ACCESS_TOKEN,
        'VK_GROUP_TOKEN': VK_GROUP_TOKEN, 
        'VK_SERVICE_KEY': VK_SERVICE_KEY,
        'VK_GROUP_ID': VK_GROUP_ID
    };
    
    Object.entries(tokens).forEach(([name, value]) => {
        if (!value || value.includes('YOUR_') || value.includes('REQUIRED')) {
            console.log(`‚ùå ${name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
        } else {
            console.log(`‚úÖ ${name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
        }
    });
    
    console.log('');
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
async function main() {
    checkTokens();
    
    const group = await getGroupInfo();
    const posts = await getGroupPosts(); 
    const user = await getCurrentUser();
    
    generateTestCommand(posts, user);
    
    console.log('');
    console.log('üìã === –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò ===');
    console.log('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-vk-social-tracking.js --interactive');
    console.log('3. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Å—Ç–∞');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É VK API –º–µ—Ç–æ–¥–æ–≤');
}

main().catch(console.error);
