// backend/add-status-column.js
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ status –≤ —Ç–∞–±–ª–∏—Ü—É users

const { getDbConnection } = require('./database');

async function addStatusColumn() {
    const db = getDbConnection();
    
    console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ status –≤ —Ç–∞–±–ª–∏—Ü—É users...\n');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ status
        const tableInfo = await new Promise((resolve, reject) => {
            db.all("PRAGMA table_info(users)", [], (err, rows) => {
                if (err) return reject(err);
                resolve(rows);
            });
        });
        
        const hasStatus = tableInfo.find(col => col.name === 'status');
        if (hasStatus) {
            console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ status —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            db.close();
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É status
        await new Promise((resolve, reject) => {
            db.run("ALTER TABLE users ADD COLUMN status TEXT DEFAULT '–ë—Ä–æ–Ω–∑–∞'", [], (err) => {
                if (err) return reject(err);
                resolve();
            });
        });
        
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ status —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await new Promise((resolve, reject) => {
            db.run("UPDATE users SET status = '–ë—Ä–æ–Ω–∑–∞' WHERE status IS NULL", [], (err) => {
                if (err) return reject(err);
                resolve();
            });
        });
        
        console.log('‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const updatedTableInfo = await new Promise((resolve, reject) => {
            db.all("PRAGMA table_info(users)", [], (err, rows) => {
                if (err) return reject(err);
                resolve(rows);
            });
        });
        
        console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
        updatedTableInfo.forEach(col => {
            const isNew = col.name === 'status' ? ' üÜï' : '';
            console.log(`   ${col.name} - ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.dflt_value ? `DEFAULT ${col.dflt_value}` : ''}${isNew}`);
        });
        
        db.close();
        console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        db.close();
        process.exit(1);
    }
}

addStatusColumn().catch(console.error);
