// backend/check-table-structure.js
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users

const { getDbConnection } = require('./database');

async function checkTableStructure() {
    const db = getDbConnection();
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users...\n');
    
    try {
        // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const tableInfo = await new Promise((resolve, reject) => {
            db.all("PRAGMA table_info(users)", [], (err, rows) => {
                if (err) return reject(err);
                resolve(rows);
            });
        });
        
        console.log('üìã –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
        tableInfo.forEach(col => {
            console.log(`   ${col.name} - ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.dflt_value ? `DEFAULT ${col.dflt_value}` : ''}`);
        });
        
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–∫–∏ status:');
        const hasStatus = tableInfo.find(col => col.name === 'status');
        if (hasStatus) {
            console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ status –Ω–∞–π–¥–µ–Ω–∞:', hasStatus);
        } else {
            console.log('‚ùå –ö–æ–ª–æ–Ω–∫–∞ status –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
            console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É status –≤ —Ç–∞–±–ª–∏—Ü—É');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã
        console.log('\nüìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã users:');
        const users = await new Promise((resolve, reject) => {
            db.all("SELECT * FROM users LIMIT 5", [], (err, rows) => {
                if (err) return reject(err);
                resolve(rows);
            });
        });
        
        if (users.length > 0) {
            console.log(`   –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
            users.forEach(user => {
                console.log(`   - ID: ${user.id}, Telegram: ${user.telegram_user_id}, –ë–∞–ª–ª—ã: ${user.points}, –°—Ç–∞—Ç—É—Å: ${user.status || '–ù–ï–¢'}`);
            });
        } else {
            console.log('   –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è');
        }
        
        db.close();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
        db.close();
    }
}

checkTableStructure().catch(console.error);
