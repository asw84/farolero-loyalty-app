// backend/controllers/analytics.controller.js
// API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ RFM-–∞–Ω–∞–ª–∏–∑–∞

const rfmService = require('../services/rfm.service');
const { dbAll } = require('../database');

/**
 * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç RFM –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * POST /api/analytics/rfm/calculate
 */
const recalculateRFM = async (req, res) => {
    try {
        console.log('[ANALYTICS_CONTROLLER] üîÑ –ó–∞–ø—É—â–µ–Ω –ø–µ—Ä–µ—Å—á–µ—Ç RFM...');
        
        await rfmService.calculateRFMForAllUsers();
        
        res.status(200).json({
            success: true,
            message: 'RFM –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        });

        console.log('[ANALYTICS_CONTROLLER] ‚úÖ RFM –ø–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');

    } catch (error) {
        console.error('[ANALYTICS_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ RFM:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ RFM –∞–Ω–∞–ª–∏–∑–∞'
        });
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
 * GET /api/analytics/rfm/segments
 */
const getSegmentsSummary = async (req, res) => {
    try {
        const summary = await rfmService.getSegmentsSummary();
        
        res.status(200).json({
            success: true,
            data: summary
        });

    } catch (error) {
        console.error('[ANALYTICS_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤'
        });
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç RFM –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/analytics/rfm/user/:telegramId
 */
const getUserRFM = async (req, res) => {
    try {
        const { telegramId } = req.params;

        const rfmData = await rfmService.getUserRFM(telegramId);

        if (!rfmData) {
            return res.status(404).json({
                success: false,
                error: 'RFM –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            });
        }

        res.status(200).json({
            success: true,
            data: rfmData
        });

    } catch (error) {
        console.error('[ANALYTICS_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RFM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RFM –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
 * GET /api/analytics/rfm/segment/:segmentName
 */
const getSegmentUsers = async (req, res) => {
    try {
        const { segmentName } = req.params;
        const { limit = 50 } = req.query;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!rfmService.RFM_SEGMENTS[segmentName]) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç'
            });
        }

        const users = await rfmService.getSegmentUsers(segmentName, parseInt(limit));

        res.status(200).json({
            success: true,
            segmentName,
            segmentInfo: rfmService.RFM_SEGMENTS[segmentName],
            users
        });

    } catch (error) {
        console.error('[ANALYTICS_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞'
        });
    }
};

/**
 * –û–±—â–∏–π –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 * GET /api/analytics/dashboard
 */
const getDashboard = async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalUsers = await dbAll('SELECT COUNT(*) as count FROM users')[0];
        const totalPurchases = await dbAll('SELECT COUNT(*) as count, SUM(amount) as total FROM purchases')[0];
        const activeUsers = await dbAll(`
            SELECT COUNT(DISTINCT user_telegram_id) as count 
            FROM purchases 
            WHERE purchase_date >= date('now', '-30 days')
        `)[0];

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        const segmentsSummary = await rfmService.getSegmentsSummary();

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–µ–≥–º–µ–Ω—Ç—ã
        const topSegments = segmentsSummary.segments
            .sort((a, b) => b.user_count - a.user_count)
            .slice(0, 5);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        const dailyStats = await dbAll(`
            SELECT 
                DATE(purchase_date) as date,
                COUNT(*) as purchases,
                COUNT(DISTINCT user_telegram_id) as unique_users,
                SUM(amount) as revenue
            FROM purchases 
            WHERE purchase_date >= date('now', '-30 days')
            GROUP BY DATE(purchase_date)
            ORDER BY date DESC
        `);

        res.status(200).json({
            success: true,
            data: {
                overview: {
                    totalUsers: totalUsers?.count || 0,
                    totalPurchases: totalPurchases?.count || 0,
                    totalRevenue: Math.round(totalPurchases?.total || 0),
                    activeUsers: activeUsers?.count || 0
                },
                segments: {
                    total: segmentsSummary.totalUsers,
                    topSegments
                },
                dailyStats,
                lastUpdated: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error('[ANALYTICS_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞'
        });
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
 * GET /api/analytics/referrals
 */
const getReferralAnalytics = async (req, res) => {
    try {
        const referralStats = await dbAll(`
            SELECT 
                COUNT(*) as total_referrals,
                COUNT(CASE WHEN activated_at IS NOT NULL THEN 1 END) as activated_referrals,
                SUM(CASE WHEN bonus_paid = 1 THEN bonus_amount ELSE 0 END) as total_bonuses_paid,
                AVG(CASE WHEN activated_at IS NOT NULL THEN bonus_amount ELSE 0 END) as avg_bonus
            FROM referrals
        `)[0];

        // –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä—ã
        const topReferrers = await dbAll(`
            SELECT 
                referrer_telegram_id,
                COUNT(*) as referrals_count,
                SUM(bonus_amount) as total_earned
            FROM referrals 
            WHERE activated_at IS NOT NULL
            GROUP BY referrer_telegram_id
            ORDER BY referrals_count DESC
            LIMIT 10
        `);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        const dailyReferrals = await dbAll(`
            SELECT 
                DATE(activated_at) as date,
                COUNT(*) as activated_referrals
            FROM referrals 
            WHERE activated_at IS NOT NULL 
            AND activated_at >= date('now', '-30 days')
            GROUP BY DATE(activated_at)
            ORDER BY date DESC
        `);

        const conversionRate = referralStats.total_referrals > 0 
            ? Math.round((referralStats.activated_referrals / referralStats.total_referrals) * 100)
            : 0;

        res.status(200).json({
            success: true,
            data: {
                overview: {
                    ...referralStats,
                    conversionRate: `${conversionRate}%`
                },
                topReferrers,
                dailyReferrals
            }
        });

    } catch (error) {
        console.error('[ANALYTICS_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'
        });
    }
};

module.exports = {
    recalculateRFM,
    getSegmentsSummary,
    getUserRFM,
    getSegmentUsers,
    getDashboard,
    getReferralAnalytics
};
