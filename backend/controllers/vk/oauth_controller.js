// backend/controllers/vk.oauth.controller.js
const vkOAuthService = require('../../services/vk_oauth_service');
const userService = require('../../services/user.service'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º userService
const htmlTemplateService = require('../../services/html.template.service');
const { generateCodeVerifier, generateCodeChallenge } = require('../../utils/pkce-helper');

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VK –¥–ª—è frontend
 * GET /api/vk/config
 */
const getVKClientConfig = async (req, res) => {
    console.log('[VK_ID_CONTROLLER] üîß getVKConfig called!');
    try {
        const config = {
            appId: process.env.VK_CLIENT_ID,
            redirectUri: process.env.VK_REDIRECT_URI,
            apiUrl: process.env.APP_BASE_URL || 'https://api.5425685-au70735.twc1.net'
        };
        
        console.log('[VK_ID_CONTROLLER] üîß Config:', config);
        
        if (!config.appId) {
            console.log('[VK_ID_CONTROLLER] ‚ùå VK_CLIENT_ID not configured');
            return res.status(500).json({
                success: false,
                error: 'VK_CLIENT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            });
        }
        
        console.log('[VK_ID_CONTROLLER] ‚úÖ Sending config response');
        res.json({
            success: true,
            config: config
        });
    } catch (error) {
        console.error('[VK_ID_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VK:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VK'
        });
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –æ—Ç VK ID SDK
 * POST /api/oauth/vk/verify-auth
 */
const verifyVKIDAuth = async (req, res) => {
    try {
        const { vkData, telegramId } = req.body;

        if (!vkData || !telegramId) {
            console.error('[VK_ID_CONTROLLER] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç vkData –∏–ª–∏ telegramId –≤ –∑–∞–ø—Ä–æ—Å–µ');
            return res.status(400).json({ success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: vkData –∏ telegramId' });
        }

        console.log(`[VK_ID_CONTROLLER] üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é VK ID –¥–ª—è Telegram ID: ${telegramId}`);

        const result = await vkOAuthService.verifyAndLinkAccount(vkData, telegramId);

        console.log(`[VK_ID_CONTROLLER] ‚úÖ –ê–∫–∫–∞—É–Ω—Ç VK ID —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –¥–ª—è Telegram ID: ${telegramId}`);
        
        res.status(200).json({ success: true, ...result });

    } catch (error) {
        console.error('[VK_ID_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö VK ID:', error);
        res.status(500).json({ success: false, error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ VK ID' });
    }
};


/**
 * API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ HTML —à–∞–±–ª–æ–Ω–æ–≤
 * GET /api/vk/oauth/templates/config
 */
const getTemplatesConfig = async (req, res) => {
    try {
        const config = htmlTemplateService.getConfig();
        res.json({
            success: true,
            config: config
        });
    } catch (error) {
        console.error('[VK_ID_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤'
        });
    }
};

/**
 * API endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ HTML —à–∞–±–ª–æ–Ω–æ–≤
 * PUT /api/vk/oauth/templates/config
 */
const updateTemplatesConfig = async (req, res) => {
    try {
        const newConfig = req.body;
        
        if (!newConfig || typeof newConfig !== 'object') {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        htmlTemplateService.updateConfig(newConfig);
        
        res.json({
            success: true,
            message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
            config: htmlTemplateService.getConfig()
        });
    } catch (error) {
        console.error('[VK_ID_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤'
        });
    }
};

/**
 * NEW: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ VK —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PKCE.
 * GET /auth/vk/login?tg_user_id=123
 */
const handleVKLogin = async (req, res) => {
    try {
        const { tg_user_id } = req.query;
        if (!tg_user_id) {
            return res.status(400).send(htmlTemplateService.generateErrorPage('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä tg_user_id'));
        }

        console.log(`[VK_ID_CONTROLLER] üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é VK –¥–ª—è Telegram ID: ${tg_user_id}`);

        // --- PKCE Flow ---
        const codeVerifier = generateCodeVerifier();
        const codeChallenge = generateCodeChallenge(codeVerifier);

        const statePayload = {
            tg_user_id: tg_user_id,
            code_verifier: codeVerifier // –°–æ—Ö—Ä–∞–Ω—è–µ–º verifier –≤ state
        };
        const state = Buffer.from(JSON.stringify(statePayload)).toString('base64');
        
        const clientId = process.env.VK_CLIENT_ID;
        const redirectUri = process.env.VK_REDIRECT_URI;

        const authUrl = new URL('https://id.vk.com/authorize');
        authUrl.searchParams.append('client_id', clientId);
        authUrl.searchParams.append('redirect_uri', redirectUri);
        authUrl.searchParams.append('response_type', 'code');
        authUrl.searchParams.append('state', state);
        authUrl.searchParams.append('scope', 'email');
        authUrl.searchParams.append('code_challenge', codeChallenge);
        authUrl.searchParams.append('code_challenge_method', 'S256');

        console.log(`[VK_ID_CONTROLLER] üîó –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ VK ID OAuth: ${authUrl.toString()}`);
        res.redirect(authUrl.toString());

    } catch (error) {
        console.error('[VK_ID_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é VK:', error);
        res.status(500).send(htmlTemplateService.generateErrorPage('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
    }
};


/**
 * NEW: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç VK OAuth, –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
 * GET /api/oauth/vk/callback?code=...&state=...
 */
const handleCallback = async (req, res) => {
    try {
        const { code, state } = req.query;
        
        if (!code || !state) {
            return res.status(400).send(htmlTemplateService.generateErrorPage('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã code –∏–ª–∏ state'));
        }

        const statePayload = JSON.parse(Buffer.from(state, 'base64').toString());
        const { tg_user_id, code_verifier } = statePayload;

        if (!tg_user_id || !code_verifier) {
            return res.status(400).send(htmlTemplateService.generateErrorPage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä state'));
        }

        console.log(`[VK_ID_CONTROLLER] üîê –ü–æ–ª—É—á–µ–Ω callback –æ—Ç VK OAuth –¥–ª—è Telegram ID: ${tg_user_id}`);

        // 1. –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
        const tokenData = await vkOAuthService.exchangeCodeForToken(code, code_verifier);
        const { access_token, user_id: vk_user_id } = tokenData;

        // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
        const vkUserData = await vkOAuthService.getVKUserData(access_token, vk_user_id);

        // 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î –∏ AmoCRM
        await userService.linkVkToUser(tg_user_id, vk_user_id, vkUserData);
        
        console.log(`[VK_ID_CONTROLLER] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VK ${vkUserData.first_name} ${vkUserData.last_name} (ID: ${vkUserData.id}) —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram ID ${tg_user_id}.`);

        // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        return htmlTemplateService.sendSuccess(res);
  } catch (error) {
    console.error('--- [OAUTH CONTROLLER CATCH BLOCK] ---');
    console.error(`–ö–û–ù–¢–†–û–õ–õ–ï–† –ü–û–ô–ú–ê–õ –û–®–ò–ë–ö–£: ${new Date().toISOString()}`);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    console.error('--- END CONTROLLER CATCH BLOCK ---');
    return htmlTemplateService.sendError(res, 'oauth_vk_failed', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é VK.');
  }
};

module.exports = {
    verifyVKIDAuth,
    getTemplatesConfig,
    updateTemplatesConfig,
    getVKConfig: getVKClientConfig, // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    handleVKLogin,
    handleCallback,
    getVKClientConfig
};