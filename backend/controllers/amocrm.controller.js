// backend/controllers/amocrm.controller.js
const amocrmService = require('../services/amocrm.service');
const amocrmClient = require('../amocrm/apiClient');

const init = async (req, res) => {
    try {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ AmoCRM
        const authUrl = amocrmClient.getAuthUrl();
        res.redirect(authUrl);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ AmoCRM:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
};

const callback = async (req, res) => {
    try {
        const { code, state, error } = req.query;
        
        if (error) {
            return res.status(400).send(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error}`);
        }
        
        if (!code) {
            return res.status(400).send('–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        console.log('–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ–±–º–µ–Ω–∏–≤–∞–µ–º –Ω–∞ —Ç–æ–∫–µ–Ω—ã...');
        await amocrmClient.exchangeCodeForTokens(code);
        
        res.status(200).send(`
            <html>
                <head><title>AmoCRM –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</title></head>
                <body>
                    <h1>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è AmoCRM —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h1>
                    <p>–¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.</p>
                    <p>–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.</p>
                    <script>
                        setTimeout(() => {
                            window.close();
                        }, 3000);
                    </script>
                </body>
            </html>
        `);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ callback AmoCRM:', error);
        res.status(500).send(`
            <html>
                <head><title>–û—à–∏–±–∫–∞ AmoCRM</title></head>
                <body>
                    <h1>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤</h1>
                    <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞.</p>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</p>
                    <script>
                        setTimeout(() => {
                            window.close();
                        }, 5000);
                    </script>
                </body>
            </html>
        `);
    }
};

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM
const testConnection = async (req, res) => {
    try {
        const amocrmClient = require('../amocrm/apiClient');
        console.log('[AmoCRM] üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
        const tokens = amocrmClient.getTokens();
        console.log('[AmoCRM] üìã –¢–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã:', {
            hasAccessToken: !!tokens.access_token,
            hasRefreshToken: !!tokens.refresh_token,
            createdAt: tokens.created_at ? new Date(tokens.created_at * 1000).toISOString() : 'N/A',
            expiresIn: tokens.expires_in
        });
        
        if (!tokens.access_token) {
            throw new Error('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
        const currentTime = Math.floor(Date.now() / 1000);
        const tokenExpirationTime = tokens.created_at + tokens.expires_in;
        
        if (currentTime >= tokenExpirationTime) {
            console.log('[AmoCRM] üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...');
            try {
                await amocrmClient.refreshTokens();
                console.log('[AmoCRM] ‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
            } catch (refreshError) {
                throw new Error('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.');
            }
        }
        
        // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        const authorizedClient = await amocrmClient.getAuthorizedClient();
        const accountResponse = await authorizedClient.get('/api/v4/account');
        
        if (accountResponse.status === 200) {
            console.log('[AmoCRM] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∞–∫–∫–∞—É–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
            res.status(200).json({
                success: true,
                message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AmoCRM —É—Å–ø–µ—à–Ω–æ',
                tokenStatus: 'valid',
                accountName: accountResponse.data.name || 'Unknown',
                expiresAt: new Date(tokenExpirationTime * 1000).toISOString()
            });
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ');
        }
    } catch (error) {
        console.error('[AmoCRM] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
        
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM',
            error: error.message
        });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ Telegram ID
const getContactByTelegramId = async (req, res) => {
    try {
        const { telegramId } = req.params;
        
        if (!telegramId) {
            return res.status(400).json({
                success: false,
                message: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }
        
        const amocrmService = require('../services/amocrm.service');
        console.log(`[AmoCRM] –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ Telegram ID: ${telegramId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AmoCRM
        try {
            const amocrmClient = require('../amocrm/apiClient');
            const tokens = amocrmClient.getTokens();
            
            if (!tokens.access_token) {
                throw new Error('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            const currentTime = Math.floor(Date.now() / 1000);
            const tokenExpirationTime = tokens.created_at + tokens.expires_in;
            
            if (currentTime >= tokenExpirationTime) {
                console.log('[AmoCRM] üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...');
                await amocrmClient.refreshTokens();
            }
        } catch (tokenError) {
            console.error('[AmoCRM] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', tokenError.message);
            return res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ AmoCRM',
                error: tokenError.message
            });
        }
        
        const contact = await amocrmService.findContactByTelegramId(telegramId);
        
        if (contact) {
            const points = amocrmService.extractPointsFromContact(contact);
            console.log(`[AmoCRM] ‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: ${contact.name} (ID: ${contact.id}), –±–∞–ª–ª–æ–≤: ${points}`);
            
            res.status(200).json({
                success: true,
                contact: {
                    id: contact.id,
                    name: contact.name,
                    points: points
                }
            });
        } else {
            console.log(`[AmoCRM] ‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç —Å Telegram ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            res.status(404).json({
                success: false,
                message: '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
    } catch (error) {
        console.error('[AmoCRM] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error.message);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞',
            error: error.message
        });
    }
};

// –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ Telegram ID —á–µ—Ä–µ–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä
const searchContactByTelegramId = async (req, res) => {
    try {
        const { telegramId } = req.query;
        
        if (!telegramId) {
            return res.status(400).json({
                success: false,
                message: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }
        
        const amocrmService = require('../services/amocrm.service');
        console.log(`[AmoCRM] –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ Telegram ID (query): ${telegramId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AmoCRM
        try {
            const amocrmClient = require('../amocrm/apiClient');
            const tokens = amocrmClient.getTokens();
            
            if (!tokens.access_token) {
                throw new Error('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            const currentTime = Math.floor(Date.now() / 1000);
            const tokenExpirationTime = tokens.created_at + tokens.expires_in;
            
            if (currentTime >= tokenExpirationTime) {
                console.log('[AmoCRM] üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...');
                await amocrmClient.refreshTokens();
            }
        } catch (tokenError) {
            console.error('[AmoCRM] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', tokenError.message);
            return res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ AmoCRM',
                error: tokenError.message
            });
        }
        
        const contact = await amocrmService.findContactByTelegramId(telegramId);
        
        if (contact) {
            const points = amocrmService.extractPointsFromContact(contact);
            console.log(`[AmoCRM] ‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: ${contact.name} (ID: ${contact.id}), –±–∞–ª–ª–æ–≤: ${points}`);
            
            res.status(200).json({
                success: true,
                contact: {
                    id: contact.id,
                    name: contact.name,
                    points: points
                }
            });
        } else {
            console.log(`[AmoCRM] ‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç —Å Telegram ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            res.status(404).json({
                success: false,
                message: '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
    } catch (error) {
        console.error('[AmoCRM] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error.message);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞',
            error: error.message
        });
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ AmoCRM
module.exports = {
    init,
    callback,
    testConnection,
    getContactByTelegramId,
    searchContactByTelegramId,
    // –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AmoCRM
    // –Ω–∞–ø—Ä–∏–º–µ—Ä: createContact, updateContact, searchContact –∏ —Ç.–¥.
};