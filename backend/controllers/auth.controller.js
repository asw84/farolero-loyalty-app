// backend/controllers/auth.controller.js
// –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ AmoCRM

const amocrmClient = require('../amocrm/apiClient');
const fs = require('fs');
const path = require('path');

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ AmoCRM
 * GET /auth/setup
 */
const showSetupPage = async (req, res) => {
    const config = require('../amocrm/amocrm.json');
    const currentDomain = req.get('host');
    const protocol = req.secure ? 'https' : 'http';
    const currentRedirectUri = `${protocol}://${currentDomain}/api/amocrm/callback`;
    
    const html = `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AmoCRM - Farolero</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh; padding: 20px;
            }
            .container { 
                max-width: 800px; margin: 0 auto; 
                background: white; border-radius: 15px; 
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                overflow: hidden;
            }
            .header { 
                background: linear-gradient(135deg, #2d5aa0 0%, #1e3a8a 100%);
                color: white; padding: 30px; text-align: center;
            }
            .content { padding: 30px; }
            .step { 
                background: #f8f9fa; padding: 20px; margin: 20px 0; 
                border-radius: 10px; border-left: 4px solid #667eea;
            }
            .step h3 { color: #333; margin-bottom: 15px; }
            .code-block { 
                background: #1a1a1a; color: #00ff00; padding: 15px; 
                border-radius: 8px; font-family: 'Courier New', monospace;
                margin: 10px 0; overflow-x: auto;
            }
            .highlight { background: #fff3cd; padding: 2px 6px; border-radius: 4px; }
            .button { 
                display: inline-block; background: #667eea; color: white; 
                padding: 12px 25px; text-decoration: none; border-radius: 8px;
                font-weight: 600; transition: all 0.3s ease;
                border: none; cursor: pointer; margin: 10px 5px;
            }
            .button:hover { background: #5a6fd8; transform: translateY(-2px); }
            .button.success { background: #28a745; }
            .button.danger { background: #dc3545; }
            .status { 
                padding: 15px; border-radius: 8px; margin: 20px 0;
                border: 1px solid #ddd;
            }
            .status.success { background: #d4edda; border-color: #c3e6cb; color: #155724; }
            .status.error { background: #f8d7da; border-color: #f5c6cb; color: #721c24; }
            .status.warning { background: #fff3cd; border-color: #ffeaa7; color: #856404; }
            .copy-btn { 
                background: #6c757d; color: white; border: none; 
                padding: 5px 10px; border-radius: 4px; cursor: pointer;
                font-size: 12px; margin-left: 10px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AmoCRM</h1>
                <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</p>
            </div>
            
            <div class="content">
                <div id="status-check">
                    <h2>üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞</h2>
                    <button onclick="checkTokenStatus()" class="button">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã</button>
                    <div id="token-status"></div>
                </div>

                <div class="step">
                    <h3>üìã –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ AmoCRM</h3>
                    <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ AmoCRM ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –í–∞—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</p>
                    <p>–í –ø–æ–ª–µ <strong>"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"</strong> —É–∫–∞–∂–∏—Ç–µ:</p>
                    <div class="code-block">
                        ${currentRedirectUri}
                        <button class="copy-btn" onclick="copyToClipboard('${currentRedirectUri}')">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                </div>

                <div class="step">
                    <h3>üîë –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h3>
                    <p>–í AmoCRM –Ω–∞–∂–º–∏—Ç–µ <strong>"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"</strong></p>
                    <p>–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ:</p>
                    <textarea id="auth-code" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å..." 
                              style="width: 100%; height: 100px; margin: 10px 0; padding: 10px; border-radius: 5px; border: 1px solid #ddd;"></textarea>
                    <button onclick="saveAuthCode()" class="button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥</button>
                </div>

                <div class="step">
                    <h3>üöÄ –®–∞–≥ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
                    <p>–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:</p>
                    <button onclick="startAuthorization()" class="button success" id="auth-btn" disabled>
                        –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    </button>
                    <div id="auth-result"></div>
                </div>

                <div class="step">
                    <h3>üíæ –®–∞–≥ 4: Backup —Ç–æ–∫–µ–Ω–æ–≤</h3>
                    <p>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</p>
                    <button onclick="downloadTokens()" class="button">–°–∫–∞—á–∞—Ç—å tokens.json</button>
                    <button onclick="showTokens()" class="button">–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã</button>
                    <div id="tokens-display"></div>
                </div>

                <div class="step">
                    <h3>üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤</h3>
                    <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å backup —Ñ–∞–π–ª tokens.json:</p>
                    <input type="file" id="tokens-file" accept=".json" style="margin: 10px 0;">
                    <button onclick="uploadTokens()" class="button">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞</button>
                </div>
            </div>
        </div>

        <script>
            async function checkTokenStatus() {
                const statusDiv = document.getElementById('token-status');
                statusDiv.innerHTML = '<div class="status warning">–ü—Ä–æ–≤–µ—Ä—è–µ–º...</div>';
                
                try {
                    const response = await fetch('/api/amocrm/test');
                    const data = await response.json();
                    
                    if (data.success) {
                        statusDiv.innerHTML = '<div class="status success">‚úÖ –¢–æ–∫–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç! AmoCRM –ø–æ–¥–∫–ª—é—á–µ–Ω.</div>';
                    } else {
                        statusDiv.innerHTML = '<div class="status error">‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: ' + data.error + '</div>';
                    }
                } catch (error) {
                    statusDiv.innerHTML = '<div class="status error">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ' + error.message + '</div>';
                }
            }

            async function saveAuthCode() {
                const code = document.getElementById('auth-code').value.trim();
                if (!code) {
                    alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!');
                    return;
                }

                try {
                    const response = await fetch('/auth/save-code', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ authCode: code })
                    });

                    const data = await response.json();
                    if (data.success) {
                        alert('‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
                        document.getElementById('auth-btn').disabled = false;
                    } else {
                        alert('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
                    }
                } catch (error) {
                    alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
                }
            }

            async function startAuthorization() {
                const resultDiv = document.getElementById('auth-result');
                resultDiv.innerHTML = '<div class="status warning">üîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã...</div>';
                
                try {
                    const response = await fetch('/auth/get-tokens', { method: 'POST' });
                    const data = await response.json();
                    
                    if (data.success) {
                        resultDiv.innerHTML = '<div class="status success">‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</div>';
                        setTimeout(checkTokenStatus, 1000);
                    } else {
                        resultDiv.innerHTML = '<div class="status error">‚ùå –û—à–∏–±–∫–∞: ' + data.error + '</div>';
                    }
                } catch (error) {
                    resultDiv.innerHTML = '<div class="status error">‚ùå –û—à–∏–±–∫–∞: ' + error.message + '</div>';
                }
            }

            async function downloadTokens() {
                try {
                    const response = await fetch('/auth/download-tokens');
                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = 'tokens.json';
                        a.click();
                        window.URL.revokeObjectURL(url);
                    } else {
                        alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤');
                    }
                } catch (error) {
                    alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
                }
            }

            async function showTokens() {
                const tokensDiv = document.getElementById('tokens-display');
                try {
                    const response = await fetch('/auth/show-tokens');
                    const data = await response.json();
                    
                    if (data.success) {
                        tokensDiv.innerHTML = '<div class="code-block">' + 
                            JSON.stringify(data.tokens, null, 2) + '</div>';
                    } else {
                        tokensDiv.innerHTML = '<div class="status error">‚ùå ' + data.error + '</div>';
                    }
                } catch (error) {
                    tokensDiv.innerHTML = '<div class="status error">‚ùå ' + error.message + '</div>';
                }
            }

            async function uploadTokens() {
                const fileInput = document.getElementById('tokens-file');
                const file = fileInput.files[0];
                
                if (!file) {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª tokens.json!');
                    return;
                }

                const formData = new FormData();
                formData.append('tokens', file);

                try {
                    const response = await fetch('/auth/upload-tokens', {
                        method: 'POST',
                        body: formData
                    });

                    const data = await response.json();
                    if (data.success) {
                        alert('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
                        setTimeout(checkTokenStatus, 1000);
                    } else {
                        alert('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
                    }
                } catch (error) {
                    alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
                }
            }

            function copyToClipboard(text) {
                navigator.clipboard.writeText(text).then(function() {
                    alert('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                });
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            window.onload = function() {
                checkTokenStatus();
            }
        </script>
    </body>
    </html>`;

    res.send(html);
};

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
 * POST /auth/save-code
 */
const saveAuthCode = async (req, res) => {
    try {
        const { authCode } = req.body;
        
        if (!authCode) {
            return res.status(400).json({
                success: false,
                error: '–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }

        // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
        const configPath = path.join(__dirname, '../amocrm/amocrm.json');
        const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        config.auth_code = authCode;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
        
        console.log('[AUTH_CONTROLLER] ‚úÖ –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        
        res.json({
            success: true,
            message: '–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
        });

    } catch (error) {
        console.error('[AUTH_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        });
    }
};

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥
 * POST /auth/get-tokens
 */
const getTokens = async (req, res) => {
    try {
        console.log('[AUTH_CONTROLLER] üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ AmoCRM API
        const tokens = await amocrmClient.getInitialToken();
        
        if (tokens) {
            console.log('[AUTH_CONTROLLER] ‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
            res.json({
                success: true,
                message: '–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
            });
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã');
        }

    } catch (error) {
        console.error('[AUTH_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤'
        });
    }
};

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª tokens.json
 * GET /auth/download-tokens
 */
const downloadTokens = async (req, res) => {
    try {
        const tokensPath = path.join(__dirname, '../tokens.json');
        
        if (!fs.existsSync(tokensPath)) {
            return res.status(404).json({
                success: false,
                error: '–§–∞–π–ª tokens.json –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        res.download(tokensPath, 'tokens.json', (err) => {
            if (err) {
                console.error('[AUTH_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', err);
                res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞'
                });
            }
        });

    } catch (error) {
        console.error('[AUTH_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ download:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'
        });
    }
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ tokens.json
 * GET /auth/show-tokens
 */
const showTokens = async (req, res) => {
    try {
        const tokensPath = path.join(__dirname, '../tokens.json');
        
        if (!fs.existsSync(tokensPath)) {
            return res.json({
                success: false,
                error: '–§–∞–π–ª tokens.json –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        const tokens = JSON.parse(fs.readFileSync(tokensPath, 'utf-8'));
        
        // –°–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const maskedTokens = {
            ...tokens,
            access_token: tokens.access_token ? tokens.access_token.substring(0, 50) + '...' : null,
            refresh_token: tokens.refresh_token ? tokens.refresh_token.substring(0, 50) + '...' : null
        };

        res.json({
            success: true,
            tokens: maskedTokens
        });

    } catch (error) {
        console.error('[AUTH_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        res.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤'
        });
    }
};

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç tokens.json –∏–∑ —Ñ–∞–π–ª–∞
 * POST /auth/upload-tokens
 */
const uploadTokens = async (req, res) => {
    try {
        if (!req.files || !req.files.tokens) {
            return res.status(400).json({
                success: false,
                error: '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            });
        }

        const tokensFile = req.files.tokens;
        const tokensContent = tokensFile.data.toString('utf-8');
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º JSON
        let tokens;
        try {
            tokens = JSON.parse(tokensContent);
        } catch (parseError) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!tokens.access_token || !tokens.refresh_token) {
            return res.status(400).json({
                success: false,
                error: '–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã'
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        const tokensPath = path.join(__dirname, '../tokens.json');
        fs.writeFileSync(tokensPath, JSON.stringify(tokens, null, 2));
        
        console.log('[AUTH_CONTROLLER] ‚úÖ –¢–æ–∫–µ–Ω—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
        
        res.json({
            success: true,
            message: '–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'
        });

    } catch (error) {
        console.error('[AUTH_CONTROLLER] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤'
        });
    }
};

module.exports = {
    showSetupPage,
    saveAuthCode,
    getTokens,
    downloadTokens,
    showTokens,
    uploadTokens
};
