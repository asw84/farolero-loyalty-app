// backend/modules/core/Loyalty/index.js
// Loyalty Module - –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏

class LoyaltyModule {
    constructor(logger) {
        this.logger = logger;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        this.STATUS_CONFIG = {
            bronze: {
                name: '–ë—Ä–æ–Ω–∑–∞',
                minPoints: 0,
                cashbackRate: 5,
                color: '#CD7F32',
                benefits: ['5% –∫—ç—à–±—ç–∫', '–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
            },
            silver: {
                name: '–°–µ—Ä–µ–±—Ä–æ',
                minPoints: 500,
                cashbackRate: 10,
                color: '#C0C0C0',
                benefits: ['10% –∫—ç—à–±—ç–∫', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–†–∞–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–∏–¥–∫–∞—Ö']
            },
            gold: {
                name: '–ó–æ–ª–æ—Ç–æ',
                minPoints: 1500,
                cashbackRate: 15,
                color: '#FFD700',
                benefits: ['15% –∫—ç—à–±—ç–∫', 'VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞']
            },
            platinum: {
                name: '–ü–ª–∞—Ç–∏–Ω–∞',
                minPoints: 3000,
                cashbackRate: 20,
                color: '#E5E4E2',
                benefits: ['20% –∫—ç—à–±—ç–∫', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä', '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ']
            }
        };

        this.logger.info('LoyaltyModule initialized');
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –±–∞–ª–ª–∞–º
     * @param {number} points - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
     * @returns {string} - —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    calculateStatus(points) {
        this.logger.debug('Calculating status for points', { points });

        if (points >= this.STATUS_CONFIG.platinum.minPoints) {
            return 'platinum';
        } else if (points >= this.STATUS_CONFIG.gold.minPoints) {
            return 'gold';
        } else if (points >= this.STATUS_CONFIG.silver.minPoints) {
            return 'silver';
        } else {
            return 'bronze';
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ
     * @param {string} status - —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} - –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ
     */
    getStatusInfo(status) {
        const statusData = this.STATUS_CONFIG[status];
        if (!statusData) {
            throw new Error(`Invalid status: ${status}`);
        }

        return {
            status,
            ...statusData
        };
    }

    /**
     * –†–∞—Å—á–µ—Ç –∫—ç—à–±—ç–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
     * @param {string} status - —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} amount - —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
     * @returns {number} - —Ä–∞–∑–º–µ—Ä –∫—ç—à–±—ç–∫–∞ –≤ –±–∞–ª–ª–∞—Ö
     */
    calculateCashback(status, amount) {
        const statusInfo = this.getStatusInfo(status);
        const cashback = Math.floor(amount * statusInfo.cashbackRate / 100);
        
        this.logger.debug('Calculated cashback', { status, amount, cashback, rate: statusInfo.cashbackRate });
        
        return cashback;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
     * @param {number} points - —Ç–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã
     * @returns {Object} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
     */
    getStatusProgress(points) {
        const currentStatus = this.calculateStatus(points);
        const currentStatusInfo = this.getStatusInfo(currentStatus);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
        let nextStatus = null;
        let pointsToNext = 0;
        let progressPercent = 100; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å

        if (currentStatus === 'bronze') {
            nextStatus = 'silver';
            pointsToNext = this.STATUS_CONFIG.silver.minPoints - points;
            progressPercent = (points / this.STATUS_CONFIG.silver.minPoints) * 100;
        } else if (currentStatus === 'silver') {
            nextStatus = 'gold';
            pointsToNext = this.STATUS_CONFIG.gold.minPoints - points;
            const totalNeeded = this.STATUS_CONFIG.gold.minPoints - this.STATUS_CONFIG.silver.minPoints;
            const currentProgress = points - this.STATUS_CONFIG.silver.minPoints;
            progressPercent = (currentProgress / totalNeeded) * 100;
        } else if (currentStatus === 'gold') {
            nextStatus = 'platinum';
            pointsToNext = this.STATUS_CONFIG.platinum.minPoints - points;
            const totalNeeded = this.STATUS_CONFIG.platinum.minPoints - this.STATUS_CONFIG.gold.minPoints;
            const currentProgress = points - this.STATUS_CONFIG.gold.minPoints;
            progressPercent = (currentProgress / totalNeeded) * 100;
        }

        return {
            currentStatus: currentStatusInfo,
            nextStatus: nextStatus ? this.getStatusInfo(nextStatus) : null,
            pointsToNext: Math.max(0, pointsToNext),
            progressPercent: Math.min(100, Math.max(0, progressPercent))
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
     * @returns {Array} - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
     */
    getAllStatuses() {
        return Object.keys(this.STATUS_CONFIG).map(status => ({
            status,
            ...this.STATUS_CONFIG[status]
        }));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
     * @param {number} userPoints - –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} requestedPoints - –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –∫ —Å–ø–∏—Å–∞–Ω–∏—é –±–∞–ª–ª—ã
     * @param {number} purchaseAmount - —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
     * @returns {Object} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    validatePointsUsage(userPoints, requestedPoints, purchaseAmount) {
        // –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å 50% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ –±–∞–ª–ª–∞–º–∏
        const maxPointsUsage = Math.floor(purchaseAmount * 0.5);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
        if (userPoints < requestedPoints) {
            return {
                valid: false,
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –Ω–∞ —Å—á–µ—Ç—É',
                maxAvailable: userPoints
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (requestedPoints > maxPointsUsage) {
            return {
                valid: false,
                error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 50% –æ—Ç —Å—É–º–º—ã)',
                maxUsage: maxPointsUsage
            };
        }

        return {
            valid: true,
            pointsToDeduct: requestedPoints,
            remainingPoints: userPoints - requestedPoints,
            discountAmount: requestedPoints // 1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å
        };
    }

    /**
     * –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ —Å —É—á–µ—Ç–æ–º –±–∞–ª–ª–æ–≤ –∏ –∫—ç—à–±—ç–∫–∞
     * @param {number} originalAmount - –∏—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞
     * @param {number} pointsUsed - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã
     * @param {string} userStatus - —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} - –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞
     */
    calculatePurchaseDetails(originalAmount, pointsUsed, userStatus) {
        const discount = pointsUsed;
        const finalAmount = originalAmount - discount;
        const cashback = this.calculateCashback(userStatus, finalAmount);

        return {
            originalAmount,
            discount,
            finalAmount: Math.max(0, finalAmount),
            pointsUsed,
            cashbackEarned: cashback,
            userStatus,
            savings: discount + cashback
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     * @param {number} oldPoints - —Å—Ç–∞—Ä—ã–µ –±–∞–ª–ª—ã
     * @param {number} newPoints - –Ω–æ–≤—ã–µ –±–∞–ª–ª—ã
     * @returns {Object} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    checkStatusUpgrade(oldPoints, newPoints) {
        const oldStatus = this.calculateStatus(oldPoints);
        const newStatus = this.calculateStatus(newPoints);

        if (oldStatus !== newStatus) {
            return {
                upgraded: true,
                oldStatus: this.getStatusInfo(oldStatus),
                newStatus: this.getStatusInfo(newStatus),
                celebrationMessage: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å "${this.getStatusInfo(newStatus).name}"!`
            };
        }

        return {
            upgraded: false,
            currentStatus: this.getStatusInfo(newStatus)
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} points - —Ç–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã
     * @param {string} lastActivity - –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
     * @returns {Array} - —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    getRecommendations(points, lastActivity = null) {
        const status = this.calculateStatus(points);
        const progress = this.getStatusProgress(points);
        const recommendations = [];

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞
        if (progress.nextStatus) {
            recommendations.push({
                type: 'status_upgrade',
                title: `–î–æ —Å—Ç–∞—Ç—É—Å–∞ "${progress.nextStatus.name}" –æ—Å—Ç–∞–ª–æ—Å—å ${progress.pointsToNext} –±–∞–ª–ª–æ–≤`,
                description: `–ü–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤: ${progress.nextStatus.benefits.join(', ')}`,
                action: '–£–∑–Ω–∞—Ç—å –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã',
                priority: 'high'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (!lastActivity || Date.now() - lastActivity > 7 * 24 * 60 * 60 * 1000) {
            recommendations.push({
                type: 'activity',
                title: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                description: '–õ–∞–π–∫–∞–π—Ç–µ –ø–æ—Å—Ç—ã, –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –¥–µ–ª–∏—Ç–µ—Å—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö',
                action: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º',
                priority: 'medium'
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–∞–ª–ª–æ–≤
        if (points >= 100) {
            recommendations.push({
                type: 'spend_points',
                title: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã',
                description: '–ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –¥–æ 50% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏',
                action: '–í—ã–±—Ä–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                priority: 'low'
            });
        }

        return recommendations;
    }
}

module.exports = LoyaltyModule;
