// backend/utils/autodetect-fields.js
// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π AmoCRM

const amocrmClient = require('../amocrm/apiClient');

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç ID –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º
 * @param {string} entityType - —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ (contacts, leads, companies)
 * @returns {Promise<Object>} - –æ–±—ä–µ–∫—Ç —Å ID –ø–æ–ª–µ–π
 */
async function autodetectCustomFields(entityType = 'contacts') {
    try {
        console.log(`[AUTODETECT] üîç –ü–æ–∏—Å–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è ${entityType}...`);
        
        const client = await amocrmClient.getAuthorizedClient();
        const response = await client.get(`/api/v4/${entityType}/custom_fields`);
        
        const fields = response.data._embedded?.custom_fields || [];
        const fieldMap = {};
        
        // –ò—â–µ–º –ø–æ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏–ª–∏ –∫–æ–¥–∞–º
        const searchPatterns = {
            'TELEGRAM_ID_FIELD_ID': ['telegram', 'telegram_id', '—Ç–µ–ª–µ–≥—Ä–∞–º', '—Ç–≥'],
            'POINTS_FIELD_ID': ['points', '–±–∞–ª–ª—ã', '–±–∞–ª–ª', '–æ—á–∫–∏', 'point'],
            'VK_ID_FIELD_ID': ['vk', 'vk_id', '–≤–∫', '–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ', 'vkontakte'],
            'INSTAGRAM_ID_FIELD_ID': ['instagram', 'instagram_id', '–∏–Ω—Å—Ç–∞–≥—Ä–∞–º', '–∏–Ω—Å—Ç–∞', 'ig']
        };
        
        for (const [configKey, patterns] of Object.entries(searchPatterns)) {
            const field = fields.find(f => {
                const name = f.name.toLowerCase();
                const code = f.code?.toLowerCase() || '';
                return patterns.some(pattern => 
                    name.includes(pattern) || code.includes(pattern)
                );
            });
            
            if (field) {
                fieldMap[configKey] = field.id;
                console.log(`[AUTODETECT] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ "${field.name}" (ID: ${field.id}) –¥–ª—è ${configKey}`);
            } else {
                console.log(`[AUTODETECT] ‚ùå –ü–æ–ª–µ –¥–ª—è ${configKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${patterns.join(', ')}`);
            }
        }
        
        return fieldMap;
    } catch (error) {
        console.error('[AUTODETECT] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π:', error.message);
        throw error;
    }
}

/**
 * –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 */
async function listAllCustomFields(entityType = 'contacts') {
    try {
        const client = await amocrmClient.getAuthorizedClient();
        const response = await client.get(`/api/v4/${entityType}/custom_fields`);
        
        const fields = response.data._embedded?.custom_fields || [];
        
        console.log(`\n[AUTODETECT] üìã –í—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –¥–ª—è ${entityType}:`);
        console.log('‚îÄ'.repeat(80));
        
        fields.forEach(field => {
            console.log(`ID: ${field.id} | –ù–∞–∑–≤–∞–Ω–∏–µ: "${field.name}" | –¢–∏–ø: ${field.type} | –ö–æ–¥: ${field.code || '–Ω–µ—Ç'}`);
        });
        
        console.log('‚îÄ'.repeat(80));
        console.log(`–í—Å–µ–≥–æ –ø–æ–ª–µ–π: ${fields.length}\n`);
        
        return fields;
    } catch (error) {
        console.error('[AUTODETECT] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π:', error.message);
        throw error;
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.js —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ ID
 */
async function generateUpdatedConfig() {
    try {
        const fieldMap = await autodetectCustomFields('contacts');
        
        console.log('\n[AUTODETECT] üîß –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è config.js:');
        console.log('‚îÄ'.repeat(50));
        
        for (const [key, id] of Object.entries(fieldMap)) {
            console.log(`const ${key} = '${id}';`);
        }
        
        console.log('‚îÄ'.repeat(50));
        
        return fieldMap;
    } catch (error) {
        console.error('[AUTODETECT] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
        throw error;
    }
}

module.exports = {
    autodetectCustomFields,
    listAllCustomFields,
    generateUpdatedConfig
};

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
if (require.main === module) {
    (async () => {
        try {
            await listAllCustomFields('contacts');
            await generateUpdatedConfig();
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:', error.message);
            process.exit(1);
        }
    })();
}
