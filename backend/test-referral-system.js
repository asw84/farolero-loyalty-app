// backend/test-referral-system.js
// –¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

const referralService = require('./services/referral.service');
const { dbRun, dbGet, getDbConnection } = require('./database');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_USERS = {
    referrer: '123456789',
    referee: '987654321',
    invalidUser: '000000000'
};

// –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanupTestData() {
    try {
        const db = getDbConnection();
        // –û—Ç–∫–ª—é—á–∞–µ–º foreign key constraints –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        await dbRun('PRAGMA foreign_keys = OFF');
        
        // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        await dbRun('DELETE FROM activity WHERE user_id IN (SELECT id FROM users WHERE telegram_user_id IN (?, ?))', [TEST_USERS.referrer, TEST_USERS.referee]);
        await dbRun('DELETE FROM referrals WHERE referrer_telegram_id IN (?, ?) OR referee_telegram_id IN (?, ?)', [TEST_USERS.referrer, TEST_USERS.referee, TEST_USERS.referrer, TEST_USERS.referee]);
        await dbRun('DELETE FROM users WHERE telegram_user_id IN (?, ?)', [TEST_USERS.referrer, TEST_USERS.referee]);
        
        // –í–∫–ª—é—á–∞–µ–º foreign key constraints –æ–±—Ä–∞—Ç–Ω–æ
        await dbRun('PRAGMA foreign_keys = ON');
        console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function createTestUsers() {
    try {
        await dbRun('INSERT OR REPLACE INTO users (telegram_user_id, points, status) VALUES (?, ?, ?)', [TEST_USERS.referrer, 100, '–ë—Ä–æ–Ω–∑–∞']);
        await dbRun('INSERT OR REPLACE INTO users (telegram_user_id, points, status) VALUES (?, ?, ?)', [TEST_USERS.referee, 0, '–ë—Ä–æ–Ω–∑–∞']);
        console.log('üë• –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
    }
}

// –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
async function testGenerateReferralCode() {
    console.log('\nüß™ –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
    
    try {
        const code = await referralService.createReferralCode(TEST_USERS.referrer);
        
        if (code && code.startsWith('FAR') && code.length === 11) {
            console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω:', code);
            return code;
        } else {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞:', code);
            return null;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:', error.message);
        return null;
    }
}

// –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
async function testValidateReferralCode(referralCode) {
    console.log('\nüß™ –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
    
    if (!referralCode) {
        console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –∫–æ–¥–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
        return false;
    }
    
    try {
        const validation = await referralService.validateReferralCode(referralCode);
        
        if (validation.valid && validation.referrerTelegramId === TEST_USERS.referrer) {
            console.log('‚úÖ –ö–æ–¥ –≤–∞–ª–∏–¥–µ–Ω, —Ä–µ—Ñ–µ—Ä–µ—Ä:', validation.referrerTelegramId);
            return true;
        } else {
            console.log('‚ùå –ö–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω:', validation);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 3: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
async function testActivateReferralCode(referralCode) {
    console.log('\nüß™ –¢–µ—Å—Ç 3: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
    
    if (!referralCode) {
        console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –∫–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
        return false;
    }
    
    try {
        const result = await referralService.activateReferralCode(referralCode, TEST_USERS.referee);
        
        if (result.success && result.referrerBonus === 50 && result.refereeBonus === 20) {
            console.log('‚úÖ –ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            console.log('üí∞ –ë–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É:', result.referrerBonus);
            console.log('üí∞ –ë–æ–Ω—É—Å —Ä–µ—Ñ–∏—Ä–∏:', result.refereeBonus);
            return true;
        } else {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', result);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function testReferralStats() {
    console.log('\nüß™ –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    
    try {
        const stats = await referralService.getReferralStats(TEST_USERS.referrer);
        
        if (stats.totalReferrals === 1 && stats.totalEarned === 50) {
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
            console.log('üìä –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', stats.totalReferrals);
            console.log('üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:', stats.totalEarned);
            return true;
        } else {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
async function testPointsAward() {
    console.log('\nüß™ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤');
    
    try {
        const referrer = await dbGet('SELECT points FROM users WHERE telegram_user_id = ?', [TEST_USERS.referrer]);
        const referee = await dbGet('SELECT points FROM users WHERE telegram_user_id = ?', [TEST_USERS.referee]);
        
        if (referrer.points === 150 && referee.points === 20) {
            console.log('‚úÖ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            console.log('üí∞ –†–µ—Ñ–µ—Ä–µ—Ä:', referrer.points, '–±–∞–ª–ª–æ–≤');
            console.log('üí∞ –†–µ—Ñ–∏—Ä–∏:', referee.points, '–±–∞–ª–ª–æ–≤');
            return true;
        } else {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤');
            console.log('üí∞ –†–µ—Ñ–µ—Ä–µ—Ä:', referrer.points, '–±–∞–ª–ª–æ–≤');
            console.log('üí∞ –†–µ—Ñ–∏—Ä–∏:', referee.points, '–±–∞–ª–ª–æ–≤');
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–ª–æ–≤:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
async function testDuplicateActivation(referralCode) {
    console.log('\nüß™ –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
    
    if (!referralCode) {
        console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞');
        return false;
    }
    
    try {
        await referralService.activateReferralCode(referralCode, TEST_USERS.invalidUser);
        console.log('‚ùå –ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)');
        return false;
    } catch (error) {
        if (error.message.includes('—É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')) {
            console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
            return true;
        } else {
            console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
            return false;
        }
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runReferralTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n');
    
    let passedTests = 0;
    let totalTests = 6;
    
    try {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        await cleanupTestData();
        await createTestUsers();
        
        // –¢–µ—Å—Ç—ã
        const referralCode = await testGenerateReferralCode();
        if (referralCode) passedTests++;
        
        if (await testValidateReferralCode(referralCode)) passedTests++;
        if (await testActivateReferralCode(referralCode)) passedTests++;
        if (await testReferralStats()) passedTests++;
        if (await testPointsAward()) passedTests++;
        if (await testDuplicateActivation(referralCode)) passedTests++;
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - passedTests}/${totalTests}`);
        
        if (passedTests === totalTests) {
            console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        } else {
            console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
        }
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    } finally {
        // –û—á–∏—Å—Ç–∫–∞
        await cleanupTestData();
        console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runReferralTests();
}

module.exports = {
    runReferralTests,
    testGenerateReferralCode,
    testValidateReferralCode,
    testActivateReferralCode,
    testReferralStats,
    testPointsAward,
    testDuplicateActivation
};
