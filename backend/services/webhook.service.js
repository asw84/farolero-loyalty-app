// backend/services/webhook.service.js

const amocrmClient = require('../amocrm/apiClient');
const { findOrCreateUser, addPoints, deductPendingPoints, addPurchase } = require('../database');
const { POINTS_FOR_REFERRAL_PURCHASE } = require('../config');
const statusService = require('./status.service');
const achievementsService = require('./achievements.service');

const BASE_POINTS_FOR_PURCHASE = 100;
const PIPELINE_ID = 857311; // –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∂–µ —Å—Ç–æ–∏—Ç –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env
const STATUS_ID_PAID = 17268313;

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –≤ Qtickets.
 * @param {object} orderData - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –≤–µ–±—Ö—É–∫–∞.
 */
async function handleSuccessfulPayment(orderData) {
    let telegramId = orderData.client?.details?.telegram_user?.id;
    if (!telegramId) {
        const utmCampaign = orderData.utm?.find(tag => tag.campaign)?.campaign;
        if (utmCampaign && utmCampaign.startsWith('tgid_')) {
            telegramId = utmCampaign.replace('tgid_', '');
        }
    }

    if (!telegramId) {
        console.log('[WebhookService] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Telegram ID.');
        return { success: true, message: 'OK. No user ID found.' };
    }
    console.log(`[WebhookService] –ù–∞–π–¥–µ–Ω Telegram ID: ${telegramId}`);

    try {
        // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ AmoCRM, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
        const contact = await amocrmClient.findContactByTelegramId(telegramId);
        if (contact) {
            const leadName = `–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ —á–µ—Ä–µ–∑ Mini App (${orderData.event?.name || ''})`;
            await amocrmClient.createLead(leadName, {
                pipeline_id: PIPELINE_ID,
                status_id: STATUS_ID_PAID,
                contact_id: contact.id,
                sale: orderData.price
            });
            console.log(`[WebhookService] ‚úÖ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ "${leadName}" —Å–æ–∑–¥–∞–Ω–∞.`);
        }

        // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã —á–µ—Ä–µ–∑ –Ω–∞—à—É –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        const user = await findOrCreateUser(String(telegramId), 'telegram_user_id');
        
        // Deduct points if they were used for a discount
        await deductPendingPoints(user.id);

        // Award points to the referrer if exists
        if (user.referrer_id) {
            const referrer = await findOrCreateUser(user.referrer_id, 'id'); // Assuming findOrCreateUser can find by ID
            if (referrer) {
                await addPoints(referrer.id, POINTS_FOR_REFERRAL_PURCHASE, 'referral', 'purchase_referral');
                console.log(`[WebhookService] ‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${POINTS_FOR_REFERRAL_PURCHASE} –±–∞–ª–ª–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${referrer.telegram_user_id || referrer.id} –∑–∞ –ø–æ–∫—É–ø–∫—É.`);
            }
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        const purchaseData = {
            user_id: user.id,
            event_id: orderData.event?.id || null,
            event_name: orderData.event?.name || '–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞',
            total_price: orderData.price || 0,
            cashback_used: 0, // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ (–Ω–µ –∫—ç—à–±—ç–∫)
            final_price: orderData.price || 0,
            purchase_date: new Date().toISOString(),
            source: 'qtickets_webhook'
        };
        
        await addPurchase(purchaseData);
        console.log(`[WebhookService] ‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é: ${purchaseData.event_name}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
        try {
            const achievementResult = await achievementsService.checkAndUnlockAchievements(telegramId, 'purchase');
            if (achievementResult.totalUnlocked > 0) {
                console.log(`[WebhookService] üèÜ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${achievementResult.totalUnlocked} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –ø–æ–∫—É–ø–∫—É`);
                achievementResult.newlyUnlocked.forEach(achievement => {
                    console.log(`[WebhookService] üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.name} (+${achievement.points_reward} –±–∞–ª–ª–æ–≤)`);
                });
            }
        } catch (achievementError) {
            console.warn('[WebhookService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', achievementError.message);
        }

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const DELAY_IN_MILLISECONDS = 5 * 60 * 1000;
        console.log(`[WebhookService] –ü–ª–∞–Ω–∏—Ä—É—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –¥–ª—è ${telegramId} —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.`);
        
        setTimeout(async () => {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—ç—à–±—ç–∫–∞
                const userStatus = await statusService.getUserStatus(telegramId);
                const purchaseAmount = orderData.price || 0;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—ç—à–±—ç–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞—Ç—É—Å—É
                const cashbackCalculation = await statusService.calculateCashback(telegramId, purchaseAmount);
                const cashbackPoints = cashbackCalculation.cashbackAmount;
                
                // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫—É
                await addPoints(user.id, BASE_POINTS_FOR_PURCHASE, 'qtickets', 'purchase_base');
                console.log(`[DelayedTask] ‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${BASE_POINTS_FOR_PURCHASE} –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–∫—É–ø–∫—É`);
                
                // –ù–∞—á–∏—Å–ª—è–µ–º –∫—ç—à–±—ç–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞—Ç—É—Å—É
                if (cashbackPoints > 0) {
                    await addPoints(user.id, cashbackPoints, 'qtickets', 'purchase_cashback');
                    console.log(`[DelayedTask] ‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω –∫—ç—à–±—ç–∫ ${cashbackPoints} –±–∞–ª–ª–æ–≤ (${cashbackCalculation.cashbackRate}% –æ—Ç ${purchaseAmount} —Ä—É–±.)`);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–ª–ª—ã –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
                const statusUpdate = await statusService.updateUserStatus(telegramId);
                if (statusUpdate.statusChanged) {
                    console.log(`[DelayedTask] üéâ –°—Ç–∞—Ç—É—Å –ø–æ–≤—ã—à–µ–Ω: ${statusUpdate.oldStatus} ‚Üí ${statusUpdate.newStatus}`);
                }
                
                const totalPoints = BASE_POINTS_FOR_PURCHASE + cashbackPoints;
                console.log(`[DelayedTask] ‚úÖ –ò—Ç–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${totalPoints} –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                try {
                    const achievementResult = await achievementsService.checkAndUnlockAchievements(telegramId, 'points');
                    if (achievementResult.totalUnlocked > 0) {
                        console.log(`[DelayedTask] üèÜ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${achievementResult.totalUnlocked} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –±–∞–ª–ª—ã`);
                    }
                    
                    const statusAchievementResult = await achievementsService.checkAndUnlockAchievements(telegramId, 'status');
                    if (statusAchievementResult.totalUnlocked > 0) {
                        console.log(`[DelayedTask] üèÜ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${statusAchievementResult.totalUnlocked} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —Å—Ç–∞—Ç—É—Å`);
                    }
                } catch (achievementError) {
                    console.warn('[DelayedTask] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', achievementError.message);
                }
                
            } catch (e) {
                console.error(`[DelayedTask] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –¥–ª—è ${telegramId}:`, e);
                // Fallback - –Ω–∞—á–∏—Å–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã
                try {
                    await addPoints(user.id, BASE_POINTS_FOR_PURCHASE, 'qtickets', 'purchase_fallback');
                    console.log(`[DelayedTask] ‚ö†Ô∏è –ù–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã (fallback): ${BASE_POINTS_FOR_PURCHASE}`);
                } catch (fallbackError) {
                    console.error(`[DelayedTask] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fallback:`, fallbackError);
                }
            }
        }, DELAY_IN_MILLISECONDS);

        return { success: true, message: 'OK' };

    } catch (error) {
        console.error('‚ùå [WebhookService] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
        return { success: false, message: 'Internal Server Error' };
    }
}

module.exports = {
    handleSuccessfulPayment,
};