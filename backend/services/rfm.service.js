// backend/services/rfm.service.js
// RFM-–∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Recency, Frequency, Monetary)

const { dbRun, dbGet, dbAll } = require('../database');

// RFM —Å–µ–≥–º–µ–Ω—Ç—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
const RFM_SEGMENTS = {
  'Champions': {
    description: '–õ—É—á—à–∏–µ –∫–ª–∏–µ–Ω—Ç—ã',
    rfm_range: { R: [4, 5], F: [4, 5], M: [4, 5] },
    strategy: '–ù–∞–≥—Ä–∞–∂–¥–∞–π—Ç–µ –∏—Ö. –ú–æ–≥—É—Ç —Å—Ç–∞—Ç—å —Ä–∞–Ω–Ω–∏–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.',
    color: '#1e7b85'
  },
  'Loyal Customers': {
    description: '–õ–æ—è–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏',
    rfm_range: { R: [3, 5], F: [3, 5], M: [3, 5] },
    strategy: '–£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –ø—Ä–æ–¥–∞–∂–∏. –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ —á–ª–µ–Ω—Å—Ç–≤–æ –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.',
    color: '#2d5aa0'
  },
  'Potential Loyalists': {
    description: '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ª–æ—è–ª—å–Ω—ã–µ',
    rfm_range: { R: [3, 5], F: [1, 3], M: [1, 3] },
    strategy: '–ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —á–ª–µ–Ω—Å—Ç–≤–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã.',
    color: '#5a67d8'
  },
  'New Customers': {
    description: '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
    rfm_range: { R: [4, 5], F: [1, 1], M: [1, 1] },
    strategy: '–û–±–µ—Å–ø–µ—á—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.',
    color: '#48bb78'
  },
  'Promising': {
    description: '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ',
    rfm_range: { R: [3, 4], F: [1, 1], M: [1, 1] },
    strategy: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–±–Ω—ã–µ –≤–µ—Ä—Å–∏–∏.',
    color: '#38b2ac'
  },
  'Need Attention': {
    description: '–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è',
    rfm_range: { R: [2, 3], F: [2, 3], M: [2, 3] },
    strategy: '–î–µ–ª–∞–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã.',
    color: '#ed8936'
  },
  'About to Sleep': {
    description: '–ó–∞—Å—ã–ø–∞—é—â–∏–µ',
    rfm_range: { R: [2, 3], F: [1, 2], M: [1, 2] },
    strategy: '–î–µ–ª–∏—Ç–µ—Å—å —Ü–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.',
    color: '#ecc94b'
  },
  'At Risk': {
    description: '–ü–æ–¥ —É–≥—Ä–æ–∑–æ–π –æ—Ç—Ç–æ–∫–∞',
    rfm_range: { R: [1, 2], F: [2, 5], M: [2, 5] },
    strategy: '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ —Å–∫–∏–¥–∫–∏.',
    color: '#f56565'
  },
  'Cannot Lose Them': {
    description: '–ù–µ–ª—å–∑—è –ø–æ—Ç–µ—Ä—è—Ç—å',
    rfm_range: { R: [1, 2], F: [4, 5], M: [4, 5] },
    strategy: '–í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–∫–∏–¥–æ–∫.',
    color: '#e53e3e'
  },
  'Hibernating': {
    description: '–°–ø—è—â–∏–µ',
    rfm_range: { R: [1, 2], F: [1, 2], M: [1, 2] },
    strategy: '–†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å —Å–∏–ª—å–Ω–æ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.',
    color: '#a0aec0'
  }
};

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç RFM —Å–∫–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @returns {Promise<void>}
 */
async function calculateRFMForAllUsers() {
  try {
    console.log('[RFM] üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç RFM –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏
    const users = await dbAll(`
      SELECT DISTINCT u.telegram_user_id
      FROM users u
      INNER JOIN purchases p ON u.telegram_user_id = p.user_telegram_id
    `);

    let processedCount = 0;
    
    for (const user of users) {
      await calculateUserRFM(user.telegram_user_id);
      processedCount++;
    }

    console.log(`[RFM] ‚úÖ RFM —Ä–∞—Å—á–∏—Ç–∞–Ω –¥–ª—è ${processedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
  } catch (error) {
    console.error('[RFM] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RFM:', error);
    throw error;
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç RFM —Å–∫–æ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - RFM –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function calculateUserRFM(telegramId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const purchases = await dbAll(`
      SELECT amount, purchase_date
      FROM purchases 
      WHERE user_telegram_id = ?
      ORDER BY purchase_date DESC
    `, [telegramId]);

    if (purchases.length === 0) {
      return null; // –ù–µ—Ç –ø–æ–∫—É–ø–æ–∫
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Recency (–¥–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏)
    const lastPurchaseDate = new Date(purchases[0].purchase_date);
    const today = new Date();
    const daysSinceLastPurchase = Math.floor((today - lastPurchaseDate) / (1000 * 60 * 60 * 24));

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Frequency (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫)
    const frequency = purchases.length;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Monetary (–æ–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫)
    const monetary = purchases.reduce((sum, purchase) => sum + parseFloat(purchase.amount), 0);

    // –ü–æ–ª—É—á–∞–µ–º –∫–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞
    const quantiles = await getQuantiles();

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–∫–æ—Ä—ã –æ—Ç 1 –¥–æ 5
    const recencyScore = getRecencyScore(daysSinceLastPurchase, quantiles.recency);
    const frequencyScore = getScore(frequency, quantiles.frequency);
    const monetaryScore = getScore(monetary, quantiles.monetary);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
    const segmentName = determineSegment(recencyScore, frequencyScore, monetaryScore);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await dbRun(`
      INSERT OR REPLACE INTO rfm_segments 
      (user_telegram_id, recency_score, frequency_score, monetary_score, segment_name, calculated_at)
      VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
    `, [telegramId, recencyScore, frequencyScore, monetaryScore, segmentName]);

    const result = {
      telegramId,
      recencyScore,
      frequencyScore,
      monetaryScore,
      segmentName,
      metrics: {
        daysSinceLastPurchase,
        frequency,
        monetary: Math.round(monetary)
      }
    };

    console.log(`[RFM] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId}: R${recencyScore}F${frequencyScore}M${monetaryScore} = ${segmentName}`);
    
    return result;

  } catch (error) {
    console.error(`[RFM] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RFM –¥–ª—è ${telegramId}:`, error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ–≤)
 * @returns {Promise<Object>} - –ö–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è recency, frequency, monetary
 */
async function getQuantiles() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–≤–∞–Ω—Ç–∏–ª–µ–π
    const metrics = await dbAll(`
      SELECT 
        user_telegram_id,
        COUNT(*) as frequency,
        SUM(amount) as monetary,
        MIN(julianday('now') - julianday(purchase_date)) as recency_days
      FROM purchases
      GROUP BY user_telegram_id
      HAVING COUNT(*) > 0
    `);

    if (metrics.length === 0) {
      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
      return {
        recency: [1, 7, 30, 90, 365],
        frequency: [1, 2, 3, 5, 10],
        monetary: [100, 500, 1000, 2500, 5000]
      };
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã—á–∏—Å–ª—è–µ–º –∫–≤–∞–Ω—Ç–∏–ª–∏
    const recencyValues = metrics.map(m => m.recency_days).sort((a, b) => a - b);
    const frequencyValues = metrics.map(m => m.frequency).sort((a, b) => a - b);
    const monetaryValues = metrics.map(m => m.monetary).sort((a, b) => a - b);

    return {
      recency: getQuantileValues(recencyValues),
      frequency: getQuantileValues(frequencyValues),
      monetary: getQuantileValues(monetaryValues)
    };

  } catch (error) {
    console.error('[RFM] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∞–Ω—Ç–∏–ª–µ–π:', error);
    throw error;
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π
 * @param {number[]} values - –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
 * @returns {number[]} - –ö–≤–∞–Ω—Ç–∏–ª–∏ [20%, 40%, 60%, 80%]
 */
function getQuantileValues(values) {
  const len = values.length;
  if (len === 0) return [0, 0, 0, 0, 0];
  
  const q1 = values[Math.floor(len * 0.2)];
  const q2 = values[Math.floor(len * 0.4)];
  const q3 = values[Math.floor(len * 0.6)];
  const q4 = values[Math.floor(len * 0.8)];
  const q5 = values[len - 1];
  
  return [q1, q2, q3, q4, q5];
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç recency –≤ —Å–∫–æ—Ä (–æ–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –º–µ–Ω—å—à–µ –¥–Ω–µ–π = –±–æ–ª—å—à–µ —Å–∫–æ—Ä)
 * @param {number} days - –î–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
 * @param {number[]} quantiles - –ö–≤–∞–Ω—Ç–∏–ª–∏ recency
 * @returns {number} - –°–∫–æ—Ä –æ—Ç 1 –¥–æ 5
 */
function getRecencyScore(days, quantiles) {
  if (days <= quantiles[0]) return 5;
  if (days <= quantiles[1]) return 4;
  if (days <= quantiles[2]) return 3;
  if (days <= quantiles[3]) return 2;
  return 1;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–∫–æ—Ä –æ—Ç 1 –¥–æ 5
 * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞
 * @param {number[]} quantiles - –ö–≤–∞–Ω—Ç–∏–ª–∏
 * @returns {number} - –°–∫–æ—Ä –æ—Ç 1 –¥–æ 5
 */
function getScore(value, quantiles) {
  if (value >= quantiles[4]) return 5;
  if (value >= quantiles[3]) return 4;
  if (value >= quantiles[2]) return 3;
  if (value >= quantiles[1]) return 2;
  return 1;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ–≥–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ RFM —Å–∫–æ—Ä–æ–≤
 * @param {number} R - Recency score
 * @param {number} F - Frequency score
 * @param {number} M - Monetary score
 * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
 */
function determineSegment(R, F, M) {
  // Champions: R>=4, F>=4, M>=4
  if (R >= 4 && F >= 4 && M >= 4) return 'Champions';
  
  // Loyal Customers: R>=3, F>=3, M>=3
  if (R >= 3 && F >= 3 && M >= 3) return 'Loyal Customers';
  
  // Potential Loyalists: R>=3, F<=3, M<=3
  if (R >= 3 && F <= 3 && M <= 3) return 'Potential Loyalists';
  
  // New Customers: R>=4, F=1, M=1
  if (R >= 4 && F === 1 && M === 1) return 'New Customers';
  
  // Promising: R>=3, F=1, M=1
  if (R >= 3 && F === 1 && M === 1) return 'Promising';
  
  // Need Attention: R=2-3, F=2-3, M=2-3
  if (R >= 2 && R <= 3 && F >= 2 && F <= 3 && M >= 2 && M <= 3) return 'Need Attention';
  
  // About to Sleep: R=2-3, F<=2, M<=2
  if (R >= 2 && R <= 3 && F <= 2 && M <= 2) return 'About to Sleep';
  
  // At Risk: R<=2, F>=2, M>=2
  if (R <= 2 && F >= 2 && M >= 2) return 'At Risk';
  
  // Cannot Lose Them: R<=2, F>=4, M>=4
  if (R <= 2 && F >= 4 && M >= 4) return 'Cannot Lose Them';
  
  // Hibernating: –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å –Ω–∏–∑–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
  return 'Hibernating';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç RFM –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - RFM –¥–∞–Ω–Ω—ã–µ
 */
async function getUserRFM(telegramId) {
  try {
    const rfmData = await dbGet(`
      SELECT * FROM rfm_segments 
      WHERE user_telegram_id = ?
    `, [telegramId]);

    if (!rfmData) {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
      return await calculateUserRFM(telegramId);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–µ
    rfmData.segmentInfo = RFM_SEGMENTS[rfmData.segment_name];
    
    return rfmData;

  } catch (error) {
    console.error(`[RFM] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RFM –¥–ª—è ${telegramId}:`, error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
 * @returns {Promise<Object>} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
 */
async function getSegmentsSummary() {
  try {
    const segments = await dbAll(`
      SELECT 
        segment_name,
        COUNT(*) as user_count,
        AVG(recency_score) as avg_recency,
        AVG(frequency_score) as avg_frequency,
        AVG(monetary_score) as avg_monetary
      FROM rfm_segments
      GROUP BY segment_name
      ORDER BY user_count DESC
    `);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö
    const segmentsWithInfo = segments.map(segment => ({
      ...segment,
      info: RFM_SEGMENTS[segment.segment_name] || {}
    }));

    const totalUsers = segments.reduce((sum, s) => sum + s.user_count, 0);

    return {
      totalUsers,
      segments: segmentsWithInfo,
      segmentDefinitions: RFM_SEGMENTS
    };

  } catch (error) {
    console.error('[RFM] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
 * @param {string} segmentName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
 * @param {number} limit - –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞
 */
async function getSegmentUsers(segmentName, limit = 50) {
  try {
    const users = await dbAll(`
      SELECT 
        rfm.*,
        u.telegram_user_id,
        COUNT(p.id) as total_purchases,
        SUM(p.amount) as total_spent,
        MAX(p.purchase_date) as last_purchase_date
      FROM rfm_segments rfm
      JOIN users u ON rfm.user_telegram_id = u.telegram_user_id
      LEFT JOIN purchases p ON u.telegram_user_id = p.user_telegram_id
      WHERE rfm.segment_name = ?
      GROUP BY rfm.user_telegram_id
      ORDER BY rfm.calculated_at DESC
      LIMIT ?
    `, [segmentName, limit]);

    return users;

  } catch (error) {
    console.error(`[RFM] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞ ${segmentName}:`, error);
    throw error;
  }
}

module.exports = {
  calculateRFMForAllUsers,
  calculateUserRFM,
  getUserRFM,
  getSegmentsSummary,
  getSegmentUsers,
  RFM_SEGMENTS
};
