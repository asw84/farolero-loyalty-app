// backend/services/referral.service.js
// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å QR-–∫–æ–¥–∞–º–∏

const { dbRun, dbGet, getDbConnection } = require('../database');
const crypto = require('crypto');
const statusService = require('./status.service');
const achievementsService = require('./achievements.service');

const REFERRAL_BONUSES = {
    REFERRER_BONUS: 50,  // –ë–æ–Ω—É—Å –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
    REFEREE_BONUS: 20    // –ë–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
 * @param {string} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {string} - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
 */
function generateReferralCode(telegramId) {
    const hash = crypto.createHash('sha256')
        .update(telegramId + Date.now() + Math.random())
        .digest('hex');
    return 'FAR' + hash.substring(0, 8).toUpperCase();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<string>} - –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
 */
async function createReferralCode(telegramId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingCode = await dbGet(
            'SELECT referral_code FROM referrals WHERE referrer_telegram_id = ? AND referee_telegram_id IS NULL LIMIT 1',
            [telegramId]
        );
        
        if (existingCode) {
            console.log(`[REFERRAL] ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥: ${existingCode.referral_code}`);
            return existingCode.referral_code;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        let referralCode;
        let attempts = 0;
        const maxAttempts = 10;

        do {
            referralCode = generateReferralCode(telegramId);
            attempts++;

            try {
                await dbRun(
                    'INSERT INTO referrals (referrer_telegram_id, referral_code) VALUES (?, ?)',
                    [telegramId, referralCode]
                );
                console.log(`[REFERRAL] ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode} –¥–ª—è ${telegramId}`);
                return referralCode;
            } catch (error) {
                if (error.code === 'SQLITE_CONSTRAINT_UNIQUE' && attempts < maxAttempts) {
                    console.log(`[REFERRAL] ‚ö†Ô∏è –ö–æ–¥ ${referralCode} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π...`);
                    continue;
                }
                throw error;
            }
        } while (attempts < maxAttempts);

        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥');
    } catch (error) {
        console.error('[REFERRAL] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:', error);
        throw error;
    }
}

/**
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} referralCode - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
 * @param {string} newUserTelegramId - Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 */
async function activateReferralCode(referralCode, newUserTelegramId) {
    const db = getDbConnection();
    
    return new Promise((resolve, reject) => {
        db.serialize(async () => {
            try {
                await dbRun('BEGIN TRANSACTION;');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–¥–∞
                const referral = await dbGet(
                    'SELECT * FROM referrals WHERE referral_code = ? AND referee_telegram_id IS NULL',
                    [referralCode]
                );

                if (!referral) {
                    await dbRun('ROLLBACK;');
                    return reject(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'));
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥
                if (referral.referrer_telegram_id === newUserTelegramId) {
                    await dbRun('ROLLBACK;');
                    return reject(new Error('–ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'));
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥—Ä—É–≥–∏–µ –∫–æ–¥—ã —Ä–∞–Ω–µ–µ
                const existingActivation = await dbGet(
                    'SELECT * FROM referrals WHERE referee_telegram_id = ?',
                    [newUserTelegramId]
                );

                if (existingActivation) {
                    await dbRun('ROLLBACK;');
                    return reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'));
                }

                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
                await dbRun(
                    'UPDATE referrals SET referee_telegram_id = ?, activated_at = CURRENT_TIMESTAMP, bonus_amount = ? WHERE referral_code = ?',
                    [newUserTelegramId, REFERRAL_BONUSES.REFERRER_BONUS, referralCode]
                );

                // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                await dbRun(
                    'UPDATE users SET points = points + ? WHERE telegram_user_id = ?',
                    [REFERRAL_BONUSES.REFERRER_BONUS, referral.referrer_telegram_id]
                );

                // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await dbRun(
                    'UPDATE users SET points = points + ? WHERE telegram_user_id = ?',
                    [REFERRAL_BONUSES.REFEREE_BONUS, newUserTelegramId]
                );

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                const referrerUser = await dbGet('SELECT id FROM users WHERE telegram_user_id = ?', [referral.referrer_telegram_id]);
                const newUser = await dbGet('SELECT id FROM users WHERE telegram_user_id = ?', [newUserTelegramId]);

                if (referrerUser) {
                    await dbRun(
                        'INSERT INTO activity (user_id, points_awarded, source, activity_type) VALUES (?, ?, ?, ?)',
                        [referrerUser.id, REFERRAL_BONUSES.REFERRER_BONUS, 'referral', 'referrer_bonus']
                    );
                }

                if (newUser) {
                    await dbRun(
                        'INSERT INTO activity (user_id, points_awarded, source, activity_type) VALUES (?, ?, ?, ?)',
                        [newUser.id, REFERRAL_BONUSES.REFEREE_BONUS, 'referral', 'welcome_bonus']
                    );
                }

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                try {
                    const referrerStatusUpdate = await statusService.updateUserStatus(referral.referrer_telegram_id);
                    const newUserStatusUpdate = await statusService.updateUserStatus(newUserTelegramId);
                    
                    if (referrerStatusUpdate.statusChanged) {
                        console.log(`[ReferralService] üéâ –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω: ${referrerStatusUpdate.oldStatus} ‚Üí ${referrerStatusUpdate.newStatus}`);
                    }
                    
                    if (newUserStatusUpdate.statusChanged) {
                        console.log(`[ReferralService] üéâ –°—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω: ${newUserStatusUpdate.oldStatus} ‚Üí ${newUserStatusUpdate.newStatus}`);
                    }
                } catch (statusError) {
                    console.error('‚ùå [ReferralService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', statusError);
                    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π)
                    const referrerAchievements = await achievementsService.checkAndUnlockAchievements(referral.referrer_telegram_id, 'referral');
                    if (referrerAchievements.totalUnlocked > 0) {
                        console.log(`[ReferralService] üèÜ –†–µ—Ñ–µ—Ä–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ${referrerAchievements.totalUnlocked} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
                        referrerAchievements.newlyUnlocked.forEach(achievement => {
                            console.log(`[ReferralService] üèÜ ${achievement.name} (+${achievement.points_reward} –±–∞–ª–ª–æ–≤)`);
                        });
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞ –±–∞–ª–ª—ã –∏ —Å—Ç–∞—Ç—É—Å)
                    const newUserAchievements = await achievementsService.checkAndUnlockAchievements(newUserTelegramId, 'points');
                    if (newUserAchievements.totalUnlocked > 0) {
                        console.log(`[ReferralService] üèÜ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ${newUserAchievements.totalUnlocked} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
                    }
                } catch (achievementError) {
                    console.warn('[ReferralService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', achievementError.message);
                }

                // –ü–æ–º–µ—á–∞–µ–º –±–æ–Ω—É—Å –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–π
                await dbRun(
                    'UPDATE referrals SET bonus_paid = TRUE WHERE referral_code = ?',
                    [referralCode]
                );

                await dbRun('COMMIT;');

                console.log(`[REFERRAL] ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ ${referralCode}: ${referral.referrer_telegram_id} -> ${newUserTelegramId}`);

                resolve({
                    success: true,
                    referrerBonus: REFERRAL_BONUSES.REFERRER_BONUS,
                    refereeBonus: REFERRAL_BONUSES.REFEREE_BONUS,
                    referrerTelegramId: referral.referrer_telegram_id
                });

            } catch (error) {
                await dbRun('ROLLBACK;');
                console.error('[REFERRAL] ‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
                reject(error);
            }
        });
    });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
 */
async function getReferralStats(telegramId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userCode = await dbGet(
            'SELECT referral_code FROM referrals WHERE referrer_telegram_id = ? AND referee_telegram_id IS NULL LIMIT 1',
            [telegramId]
        );

        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const totalReferrals = await dbGet(
            'SELECT COUNT(*) as count FROM referrals WHERE referrer_telegram_id = ? AND referee_telegram_id IS NOT NULL',
            [telegramId]
        );

        // –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å
        const totalEarned = await dbGet(
            'SELECT SUM(bonus_amount) as total FROM referrals WHERE referrer_telegram_id = ? AND bonus_paid = TRUE',
            [telegramId]
        );

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const recentReferrals = await new Promise((resolve, reject) => {
            const db = getDbConnection();
            db.all(
                `SELECT referee_telegram_id, activated_at, bonus_amount 
                 FROM referrals 
                 WHERE referrer_telegram_id = ? AND referee_telegram_id IS NOT NULL 
                 ORDER BY activated_at DESC LIMIT 10`,
                [telegramId],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows);
                }
            );
        });

        return {
            referralCode: userCode?.referral_code || null,
            totalReferrals: totalReferrals?.count || 0,
            totalEarned: totalEarned?.total || 0,
            recentReferrals: recentReferrals || []
        };

    } catch (error) {
        console.error('[REFERRAL] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        throw error;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
 * @param {string} referralCode - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Promise<Object>} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ
 */
async function validateReferralCode(referralCode) {
    try {
        const referral = await dbGet(
            'SELECT referrer_telegram_id, referee_telegram_id FROM referrals WHERE referral_code = ?',
            [referralCode]
        );

        if (!referral) {
            return { valid: false, reason: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        if (referral.referee_telegram_id) {
            return { valid: false, reason: '–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' };
        }

        return { 
            valid: true, 
            referrerTelegramId: referral.referrer_telegram_id 
        };

    } catch (error) {
        console.error('[REFERRAL] ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
 * @param {string} referralCode - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
 * @returns {string} - URL –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
 */
function getReferralUrl(referralCode) {
    const botUrl = process.env.APP_BASE_URL || 'https://t.me/farolero_bot';
    return `${botUrl}?start=ref_${referralCode}`;
}

module.exports = {
    createReferralCode,
    activateReferralCode,
    getReferralStats,
    validateReferralCode,
    getReferralUrl,
    REFERRAL_BONUSES
};
