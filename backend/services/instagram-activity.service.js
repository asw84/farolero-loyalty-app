// backend/services/instagram-activity.service.js
// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Instagram

const axios = require('axios');
const { findOrCreateUser, addPoints } = require('../database');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–∞–ª–ª–æ–≤
const POINTS_FOR_POST = 50;            // –ó–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞
const POINTS_FOR_STORY = 20;           // –ó–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏
const POINTS_FOR_ENGAGEMENT = 10;      // –ó–∞ –∫–∞–∂–¥—ã–µ 100 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
const POINTS_FOR_VIEWS = 5;            // –ó–∞ –∫–∞–∂–¥—É—é 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã
 * @param {string} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} accessToken - Instagram access token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
async function checkUserActivity(telegramUserId, accessToken) {
    try {
        console.log(`[INSTAGRAM_ACTIVITY] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUserId}`);
        
        // 1. –ü–æ–ª—É—á–∞–µ–º Instagram Business Account ID
        const accountId = await getInstagramAccountId(accessToken);
        if (!accountId) {
            throw new Error('Instagram Business Account –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏)
        const recentMedia = await getRecentMedia(accountId, accessToken);
        
        // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –º–µ–¥–∏–∞ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        const activityResults = [];
        let totalPointsAwarded = 0;

        for (const media of recentMedia) {
            const result = await analyzeMediaActivity(media, telegramUserId, accessToken);
            activityResults.push(result);
            totalPointsAwarded += result.pointsAwarded;
        }

        console.log(`[INSTAGRAM_ACTIVITY] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∏—Å–ª–µ–Ω–æ ${totalPointsAwarded} –±–∞–ª–ª–æ–≤ –∑–∞ ${recentMedia.length} –º–µ–¥–∏–∞`);

        return {
            success: true,
            accountId,
            mediaChecked: recentMedia.length,
            totalPointsAwarded,
            activities: activityResults
        };

    } catch (error) {
        console.error('[INSTAGRAM_ACTIVITY] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error.message);
        return {
            success: false,
            error: error.message,
            totalPointsAwarded: 0
        };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç Instagram Business Account ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} accessToken - Instagram access token
 * @returns {Promise<string|null>} Instagram Account ID
 */
async function getInstagramAccountId(accessToken) {
    try {
        const response = await axios.get('https://graph.facebook.com/v23.0/me/accounts', {
            params: {
                access_token: accessToken
            }
        });
        
        const instagramAccount = response.data.data.find(account => account.instagram_business_account);
        return instagramAccount?.instagram_business_account?.id || null;
    } catch (error) {
        console.error('[INSTAGRAM_ACTIVITY] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Instagram Account ID:', error.message);
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
 * @param {string} accountId - Instagram Account ID
 * @param {string} accessToken - Instagram access token
 * @param {number} hoursBack - –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏—Å–∫–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –º–µ–¥–∏–∞ –æ–±—ä–µ–∫—Ç–æ–≤
 */
async function getRecentMedia(accountId, accessToken, hoursBack = 24) {
    try {
        const response = await axios.get(`https://graph.facebook.com/v23.0/${accountId}/media`, {
            params: {
                fields: 'id,media_type,timestamp,permalink,caption',
                limit: 50, // –ü–æ–ª—É—á–∞–µ–º –¥–æ 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ–¥–∏–∞
                access_token: accessToken
            }
        });

        const allMedia = response.data.data || [];
        const cutoffTime = new Date(Date.now() - hoursBack * 60 * 60 * 1000);

        // –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ–¥–∏–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ hoursBack —á–∞—Å–æ–≤
        const recentMedia = allMedia.filter(media => {
            const mediaTime = new Date(media.timestamp);
            return mediaTime >= cutoffTime;
        });

        console.log(`[INSTAGRAM_ACTIVITY] üì± –ù–∞–π–¥–µ–Ω–æ ${recentMedia.length} –º–µ–¥–∏–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${hoursBack} —á–∞—Å–æ–≤`);
        return recentMedia;
    } catch (error) {
        console.error('[INSTAGRAM_ACTIVITY] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞:', error.message);
        return [];
    }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–¥–∏–∞ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã
 * @param {object} media - –û–±—ä–µ–∫—Ç –º–µ–¥–∏–∞ Instagram
 * @param {string} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} accessToken - Instagram access token
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
 */
async function analyzeMediaActivity(media, telegramUserId, accessToken) {
    try {
        console.log(`[INSTAGRAM_ACTIVITY] üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞ ${media.id} (${media.media_type})`);
        
        // 1. –ü–æ–ª—É—á–∞–µ–º insights –¥–ª—è –º–µ–¥–∏–∞
        const insights = await getMediaInsights(media.id, media.media_type, accessToken);
        
        // 2. –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await findOrCreateUser(telegramUserId, 'telegram_user_id');
        
        // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        let pointsAwarded = 0;
        const reasons = [];

        // –ë–∞–ª–ª—ã –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        if (media.media_type === 'STORY') {
            await addPoints(user.id, POINTS_FOR_STORY, 'instagram', 'story_post');
            pointsAwarded += POINTS_FOR_STORY;
            reasons.push(`Story –ø—É–±–ª–∏–∫–∞—Ü–∏—è: +${POINTS_FOR_STORY}`);
        } else {
            await addPoints(user.id, POINTS_FOR_POST, 'instagram', 'feed_post');
            pointsAwarded += POINTS_FOR_POST;
            reasons.push(`–ü–æ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—è: +${POINTS_FOR_POST}`);
        }

        // –ë–∞–ª–ª—ã –∑–∞ engagement (–ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã)
        if (insights.success) {
            const engagementPoints = calculateEngagementPoints(insights.data);
            if (engagementPoints > 0) {
                await addPoints(user.id, engagementPoints, 'instagram', 'engagement');
                pointsAwarded += engagementPoints;
                reasons.push(`Engagement: +${engagementPoints}`);
            }

            const viewsPoints = calculateViewsPoints(insights.data);
            if (viewsPoints > 0) {
                await addPoints(user.id, viewsPoints, 'instagram', 'views');
                pointsAwarded += viewsPoints;
                reasons.push(`–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: +${viewsPoints}`);
            }
        }

        console.log(`[INSTAGRAM_ACTIVITY] ‚úÖ –ú–µ–¥–∏–∞ ${media.id}: –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${pointsAwarded} –±–∞–ª–ª–æ–≤`);

        return {
            mediaId: media.id,
            mediaType: media.media_type,
            timestamp: media.timestamp,
            pointsAwarded,
            reasons,
            insights: insights.success ? insights.data : null
        };

    } catch (error) {
        console.error(`[INSTAGRAM_ACTIVITY] ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏–∞ ${media.id}:`, error.message);
        return {
            mediaId: media.id,
            mediaType: media.media_type,
            pointsAwarded: 0,
            error: error.message
        };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç insights –¥–ª—è –º–µ–¥–∏–∞
 * @param {string} mediaId - ID –º–µ–¥–∏–∞
 * @param {string} mediaType - –¢–∏–ø –º–µ–¥–∏–∞
 * @param {string} accessToken - Instagram access token
 * @returns {Promise<object>} Insights –¥–∞–Ω–Ω—ã–µ
 */
async function getMediaInsights(mediaId, mediaType, accessToken) {
    try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        const metrics = getMetricsForMediaType(mediaType);
        
        const response = await axios.get(`https://graph.instagram.com/v23.0/${mediaId}/insights`, {
            params: {
                metric: metrics.join(','),
                access_token: accessToken
            }
        });

        return {
            success: true,
            data: response.data.data
        };
    } catch (error) {
        console.error(`[INSTAGRAM_ACTIVITY] ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å insights –¥–ª—è ${mediaId}:`, error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞
 * @param {string} mediaType - –¢–∏–ø –º–µ–¥–∏–∞ (IMAGE, VIDEO, STORY, REELS)
 * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ –º–µ—Ç—Ä–∏–∫
 */
function getMetricsForMediaType(mediaType) {
    switch (mediaType) {
        case 'STORY':
            return ['views', 'reach', 'replies'];
        case 'REELS':
        case 'VIDEO':
            return ['views', 'likes', 'comments', 'shares', 'saved'];
        case 'IMAGE':
        default:
            return ['views', 'likes', 'comments', 'shares', 'saved'];
    }
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã –∑–∞ engagement
 * @param {Array} insights - –ú–∞—Å—Å–∏–≤ insights –¥–∞–Ω–Ω—ã—Ö
 * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ engagement
 */
function calculateEngagementPoints(insights) {
    let totalEngagement = 0;
    
    insights.forEach(insight => {
        const value = insight.values?.[0]?.value || 0;
        
        // –°—É–º–º–∏—Ä—É–µ–º –ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–µ–ø–æ—Å—Ç—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (['likes', 'comments', 'shares', 'saved', 'replies'].includes(insight.name)) {
            totalEngagement += value;
        }
    });

    // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –∫–∞–∂–¥—ã–µ 100 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    return Math.floor(totalEngagement / 100) * POINTS_FOR_ENGAGEMENT;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
 * @param {Array} insights - –ú–∞—Å—Å–∏–≤ insights –¥–∞–Ω–Ω—ã—Ö
 * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
 */
function calculateViewsPoints(insights) {
    const viewsInsight = insights.find(insight => insight.name === 'views');
    const views = viewsInsight?.values?.[0]?.value || 0;
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –∫–∞–∂–¥—É—é 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    return Math.floor(views / 1000) * POINTS_FOR_VIEWS;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Instagram –∞–∫–∫–∞—É–Ω—Ç—É
 * @param {string} instagramUsername - Username Instagram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function checkUserActivityByUsername(instagramUsername, telegramUserId) {
    try {
        // –í Instagram API –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ username
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log(`[INSTAGRAM_ACTIVITY] ‚ö†Ô∏è  –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ @${instagramUsername} –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
        
        return {
            success: false,
            error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Instagram OAuth',
            suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth/instagram/login –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞'
        };
    } catch (error) {
        console.error('[INSTAGRAM_ACTIVITY] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ username:', error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

module.exports = {
    checkUserActivity,
    checkUserActivityByUsername,
    getRecentMedia,
    analyzeMediaActivity,
    getMediaInsights,
    calculateEngagementPoints,
    calculateViewsPoints
};
