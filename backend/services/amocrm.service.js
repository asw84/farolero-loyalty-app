// backend/services/amocrm.service.js
// –í–ï–†–°–ò–Ø –° –û–¢–õ–ê–î–ö–û–ô

const amocrmClient = require('../amocrm/apiClient');
const { POINTS_FIELD_ID, TELEGRAM_ID_FIELD_ID, VK_ID_FIELD_ID } = require('../config');

async function findContactByTelegramId(telegramId) {
    const contact = await amocrmClient.findContactByTelegramId(telegramId);
    
    // --- –ù–ê–®–ê "–®–ü–ò–û–ù–°–ö–ê–Ø" –°–¢–†–û–ö–ê ---
    if (contact) {
        console.log('--- –ü–û–õ–ù–´–ô –û–ë–™–ï–ö–¢ –ö–û–ù–¢–ê–ö–¢–ê –ò–ó AMO ---');
        // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON.stringify, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—é –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        console.log(JSON.stringify(contact, null, 2));
        console.log('------------------------------------');
    }
    // ------------------------------------

    return contact;
}

function extractPointsFromContact(contact) {
    if (!contact || !contact.custom_fields_values) {
        console.log(`[AmoCRM] ‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∏–º–µ–µ—Ç custom_fields_values`);
        return 0;
    }
    
    console.log(`[AmoCRM] üîç –ò—â–µ–º –ø–æ–ª–µ —Å ID ${POINTS_FIELD_ID} —Å—Ä–µ–¥–∏ ${contact.custom_fields_values.length} –ø–æ–ª–µ–π`);
    
    // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    contact.custom_fields_values.forEach(field => {
        console.log(`[AmoCRM] üìã –ü–æ–ª–µ ID: ${field.field_id} (—Ç–∏–ø: ${typeof field.field_id}), –∑–Ω–∞—á–µ–Ω–∏–µ: ${field.values?.[0]?.value || '–ø—É—Å—Ç–æ'}`);
    });
    
    // –ò—â–µ–º –ø–æ–ª–µ —Å –Ω—É–∂–Ω—ã–º ID (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –∏ –∫–∞–∫ —á–∏—Å–ª–æ)
    const pointsField = contact.custom_fields_values.find(field =>
        String(field.field_id) === String(POINTS_FIELD_ID)
    );
    
    if (pointsField) {
        const points = Number(pointsField.values[0]?.value || 0);
        console.log(`[AmoCRM] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –±–∞–ª–ª–æ–≤! –ó–Ω–∞—á–µ–Ω–∏–µ: ${points}`);
        return points;
    } else {
        console.log(`[AmoCRM] ‚ùå –ü–æ–ª–µ —Å ID ${POINTS_FIELD_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`);
        return 0;
    }
}

async function findByTelegramId(telegramId) {
    return await findContactByTelegramId(telegramId);
}

async function getCustomField(contactId, fieldName) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ ID
        const response = await amocrmClient.getAuthorizedClient().get(`/api/v4/contacts/${contactId}`);
        const contact = response.data;
        
        if (!contact || !contact.custom_fields_values) {
            console.log(`[AmoCRM] ‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∏–º–µ–µ—Ç custom_fields_values`);
            return null;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—è –ø–æ –∏–º–µ–Ω–∏
        let fieldId;
        switch (fieldName) {
            case 'VK_ID_FIELD_ID':
                fieldId = VK_ID_FIELD_ID;
                break;
            case 'TELEGRAM_ID_FIELD_ID':
                fieldId = TELEGRAM_ID_FIELD_ID;
                break;
            case 'POINTS_FIELD_ID':
                fieldId = POINTS_FIELD_ID;
                break;
            default:
                console.log(`[AmoCRM] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: ${fieldName}`);
                return null;
        }
        
        // –ò—â–µ–º –ø–æ–ª–µ —Å –Ω—É–∂–Ω—ã–º ID
        const field = contact.custom_fields_values.find(f =>
            String(f.field_id) === String(fieldId)
        );
        
        if (field) {
            const value = field.values?.[0]?.value;
            console.log(`[AmoCRM] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ ${fieldName}: ${value}`);
            return value;
        } else {
            console.log(`[AmoCRM] ‚ùå –ü–æ–ª–µ ${fieldName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`);
            return null;
        }
    } catch (error) {
        console.error(`[AmoCRM] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—è ${fieldName}:`, error);
        return null;
    }
}

module.exports = {
    findContactByTelegramId,
    extractPointsFromContact,
    findByTelegramId,
    getCustomField,
};