// backend/services/daily-tasks.service.js
// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏

const { dbRun, dbGet, dbAll, findUserByTelegramId, addPointsByTelegramId } = require('../database');
const achievementsService = require('./achievements.service');

class DailyTasksService {
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    async getUserDailyTasks(telegramId) {
        try {
            const today = new Date().toISOString().split('T')[0];
            
            // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
            await this.generateDailyTasksForUser(telegramId, today);
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            const userTasks = await dbAll(`
                SELECT 
                    dt.*,
                    udt.current_progress,
                    udt.is_completed,
                    udt.completed_at,
                    udt.points_earned
                FROM daily_tasks dt
                JOIN user_daily_tasks udt ON dt.id = udt.daily_task_id
                WHERE udt.user_telegram_id = ? 
                    AND udt.task_date = ?
                    AND dt.is_active = 1
                ORDER BY 
                    udt.is_completed ASC,
                    dt.difficulty ASC,
                    dt.points_reward DESC
            `, [telegramId, today]);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            const tasksWithProgress = userTasks.map(task => ({
                ...task,
                progress_percentage: Math.min(100, Math.round((task.current_progress / task.target_value) * 100)),
                is_available: !task.is_completed && task.current_progress < task.target_value
            }));

            return {
                success: true,
                data: {
                    date: today,
                    tasks: tasksWithProgress,
                    completed_count: tasksWithProgress.filter(t => t.is_completed).length,
                    total_count: tasksWithProgress.length,
                    total_points_available: tasksWithProgress.reduce((sum, t) => sum + (t.is_completed ? 0 : t.points_reward), 0),
                    total_points_earned: tasksWithProgress.reduce((sum, t) => sum + t.points_earned, 0)
                }
            };
        } catch (error) {
            console.error('‚ùå [DailyTasksService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
            throw error;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
     */
    async generateDailyTasksForUser(telegramId, date) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            const existingTasks = await dbGet(
                'SELECT COUNT(*) as count FROM user_daily_tasks WHERE user_telegram_id = ? AND task_date = ?',
                [telegramId, date]
            );

            if (existingTasks.count > 0) {
                // –ó–∞–¥–∞–Ω–∏—è —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
                return { success: true, message: '–ó–∞–¥–∞–Ω–∏—è —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã' };
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            const user = await findUserByTelegramId(telegramId);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const selectedTasks = await this.selectTasksForUser(user, date);

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (const task of selectedTasks) {
                await dbRun(`
                    INSERT INTO user_daily_tasks 
                    (user_telegram_id, daily_task_id, task_date)
                    VALUES (?, ?, ?)
                `, [telegramId, task.id, date]);
            }

            console.log(`üìÖ [DailyTasksService] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${selectedTasks.length} –∑–∞–¥–∞–Ω–∏–π –¥–ª—è ${telegramId} –Ω–∞ ${date}`);

            return {
                success: true,
                message: `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${selectedTasks.length} –∑–∞–¥–∞–Ω–∏–π`,
                tasks: selectedTasks
            };

        } catch (error) {
            console.error('‚ùå [DailyTasksService] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
            throw error;
        }
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async selectTasksForUser(user, date) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const allTasks = await dbAll(
                'SELECT * FROM daily_tasks WHERE is_active = 1'
            );

            // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π
            const selectedTasks = [];
            
            // 1. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const basicTasks = allTasks.filter(task => 
                ['DAILY_CHECKIN', 'DAILY_PROFILE_VIEW'].includes(task.code)
            );
            selectedTasks.push(...basicTasks);

            // 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å–æ—Ü—Å–µ—Ç–∏)
            if (user.vk_user_id) {
                const vkTask = allTasks.find(task => task.code === 'DAILY_VK_ACTIVITY');
                if (vkTask) selectedTasks.push(vkTask);
            }

            if (user.instagram_user_id) {
                const instagramTask = allTasks.find(task => task.code === 'DAILY_INSTAGRAM_ACTIVITY');
                if (instagramTask) selectedTasks.push(instagramTask);
            }

            // 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            const mediumTasks = allTasks.filter(task => 
                task.difficulty === 'medium' && 
                !selectedTasks.some(st => st.id === task.id)
            );
            if (mediumTasks.length > 0) {
                const randomMedium = mediumTasks[Math.floor(Math.random() * mediumTasks.length)];
                selectedTasks.push(randomMedium);
            }

            // 4. –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞)
            const statusMultiplier = this.getStatusMultiplier(user.status);
            const hardTasks = allTasks.filter(task => 
                task.difficulty === 'hard' && 
                !selectedTasks.some(st => st.id === task.id)
            );
            
            for (const hardTask of hardTasks) {
                if (Math.random() < 0.3 * statusMultiplier) { // 30% –±–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    selectedTasks.push(hardTask);
                }
            }

            // 5. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π (5-7 –º–∞–∫—Å–∏–º—É–º)
            const maxTasks = Math.min(7, Math.max(5, selectedTasks.length));
            return selectedTasks.slice(0, maxTasks);

        } catch (error) {
            console.error('‚ùå [DailyTasksService] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
            throw error;
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
     */
    getStatusMultiplier(status) {
        switch (status) {
            case '–ü–ª–∞—Ç–∏–Ω–∞': return 2.0;
            case '–ó–æ–ª–æ—Ç–æ': return 1.5;
            case '–°–µ—Ä–µ–±—Ä–æ': return 1.2;
            default: return 1.0;
        }
    }

    /**
     * –û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
     */
    async updateTaskProgress(telegramId, taskCode, increment = 1) {
        try {
            const today = new Date().toISOString().split('T')[0];

            // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userTask = await dbGet(`
                SELECT udt.*, dt.target_value, dt.points_reward, dt.name
                FROM user_daily_tasks udt
                JOIN daily_tasks dt ON udt.daily_task_id = dt.id
                WHERE udt.user_telegram_id = ? 
                    AND dt.code = ? 
                    AND udt.task_date = ?
                    AND udt.is_completed = 0
            `, [telegramId, taskCode, today]);

            if (!userTask) {
                return { success: false, message: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' };
            }

            const newProgress = userTask.current_progress + increment;
            const isCompleted = newProgress >= userTask.target_value;

            await dbRun('BEGIN TRANSACTION');

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await dbRun(`
                UPDATE user_daily_tasks 
                SET current_progress = ?, 
                    is_completed = ?, 
                    completed_at = ?,
                    points_earned = ?
                WHERE user_telegram_id = ? 
                    AND daily_task_id = ? 
                    AND task_date = ?
            `, [
                newProgress, 
                isCompleted ? 1 : 0, 
                isCompleted ? new Date().toISOString() : null,
                isCompleted ? userTask.points_reward : 0,
                telegramId, 
                userTask.daily_task_id, 
                today
            ]);

            let result = {
                success: true,
                task_name: userTask.name,
                progress: newProgress,
                target: userTask.target_value,
                is_completed: isCompleted,
                points_earned: 0
            };

            // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
            if (isCompleted) {
                await addPointsByTelegramId(
                    telegramId, 
                    userTask.points_reward, 
                    'daily_task', 
                    `daily_task_${taskCode}`
                );

                result.points_earned = userTask.points_reward;
                console.log(`‚úÖ [DailyTasksService] –ó–∞–¥–∞–Ω–∏–µ "${userTask.name}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${userTask.points_reward} –±–∞–ª–ª–æ–≤`);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await this.updateUserStreak(telegramId, today);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                try {
                    await achievementsService.checkAndUnlockAchievements(telegramId, 'points');
                } catch (achievementError) {
                    console.warn('[DailyTasksService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', achievementError.message);
                }
            }

            await dbRun('COMMIT');
            return result;

        } catch (error) {
            await dbRun('ROLLBACK');
            console.error('‚ùå [DailyTasksService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–Ω–∏ –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π)
     */
    async updateUserStreak(telegramId, date) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
            const todayCompletedTasks = await dbGet(`
                SELECT COUNT(*) as completed_count
                FROM user_daily_tasks udt
                JOIN daily_tasks dt ON udt.daily_task_id = dt.id
                WHERE udt.user_telegram_id = ? 
                    AND udt.task_date = ?
                    AND udt.is_completed = 1
                    AND dt.difficulty = 'easy'
            `, [telegramId, date]);

            // –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–Ω–∏–º—É–º 2 –ª–µ–≥–∫–∏—Ö –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞—Å—á–µ—Ç–∞ –¥–Ω—è
            if (todayCompletedTasks.completed_count < 2) {
                return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∏–∫–∞' };
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫
            let streak = await dbGet(
                'SELECT * FROM user_streaks WHERE user_telegram_id = ?',
                [telegramId]
            );

            const yesterday = new Date(date);
            yesterday.setDate(yesterday.getDate() - 1);
            const yesterdayStr = yesterday.toISOString().split('T')[0];

            if (!streak) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫
                await dbRun(`
                    INSERT INTO user_streaks 
                    (user_telegram_id, current_streak, longest_streak, last_activity_date, total_days_active)
                    VALUES (?, 1, 1, ?, 1)
                `, [telegramId, date]);
                
                console.log(`üî• [DailyTasksService] –ù–æ–≤—ã–π —Å—Ç—Ä–∏–∫ –Ω–∞—á–∞—Ç –¥–ª—è ${telegramId}: 1 –¥–µ–Ω—å`);
                return { success: true, current_streak: 1, is_new_record: true };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∏–∫–∞
            let newStreak = 1;
            if (streak.last_activity_date === yesterdayStr) {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç—Ä–∏–∫
                newStreak = streak.current_streak + 1;
            } else if (streak.last_activity_date === date) {
                // –°–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω
                return { success: true, current_streak: streak.current_streak, is_new_record: false };
            }

            const newLongest = Math.max(streak.longest_streak, newStreak);
            const isNewRecord = newLongest > streak.longest_streak;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫
            await dbRun(`
                UPDATE user_streaks 
                SET current_streak = ?, 
                    longest_streak = ?, 
                    last_activity_date = ?,
                    total_days_active = total_days_active + 1,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_telegram_id = ?
            `, [newStreak, newLongest, date, telegramId]);

            // –ë–æ–Ω—É—Å—ã –∑–∞ —Å—Ç—Ä–∏–∫–∏
            const streakBonuses = this.getStreakBonuses(newStreak);
            if (streakBonuses.length > 0) {
                for (const bonus of streakBonuses) {
                    await addPointsByTelegramId(telegramId, bonus.points, 'streak', `streak_${bonus.days}`);
                    console.log(`üî• [DailyTasksService] –ë–æ–Ω—É—Å –∑–∞ —Å—Ç—Ä–∏–∫ ${bonus.days} –¥–Ω–µ–π: +${bonus.points} –±–∞–ª–ª–æ–≤`);
                }
            }

            console.log(`üî• [DailyTasksService] –°—Ç—Ä–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${telegramId}: ${newStreak} –¥–Ω–µ–π`);
            return { 
                success: true, 
                current_streak: newStreak, 
                longest_streak: newLongest,
                is_new_record: isNewRecord,
                bonuses: streakBonuses
            };

        } catch (error) {
            console.error('‚ùå [DailyTasksService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–∫–∞:', error);
            throw error;
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–∫–æ–≤
     */
    getStreakBonuses(streakDays) {
        const bonuses = [];
        
        // –ë–æ–Ω—É—Å—ã –∑–∞ –≤–∞–∂–Ω—ã–µ –≤–µ—Ö–∏
        const milestones = [
            { days: 3, points: 50 },   // 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥
            { days: 7, points: 150 },  // –Ω–µ–¥–µ–ª—è
            { days: 14, points: 300 }, // 2 –Ω–µ–¥–µ–ª–∏
            { days: 30, points: 750 }  // –º–µ—Å—è—Ü
        ];

        for (const milestone of milestones) {
            if (streakDays === milestone.days) {
                bonuses.push(milestone);
            }
        }

        return bonuses;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserStreak(telegramId) {
        try {
            const streak = await dbGet(
                'SELECT * FROM user_streaks WHERE user_telegram_id = ?',
                [telegramId]
            );

            if (!streak) {
                return {
                    success: true,
                    data: {
                        current_streak: 0,
                        longest_streak: 0,
                        total_days_active: 0,
                        last_activity_date: null
                    }
                };
            }

            return {
                success: true,
                data: streak
            };

        } catch (error) {
            console.error('‚ùå [DailyTasksService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∏–∫–∞:', error);
            throw error;
        }
    }

    /**
     * –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (cron job)
     */
    async resetDailyTasks() {
        try {
            const today = new Date().toISOString().split('T')[0];
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const yesterdayStr = yesterday.toISOString().split('T')[0];

            console.log(`üîÑ [DailyTasksService] –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ ${today}`);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const activeUsers = await dbAll(`
                SELECT DISTINCT u.telegram_user_id 
                FROM users u 
                WHERE u.telegram_user_id IS NOT NULL
                    AND EXISTS (
                        SELECT 1 FROM user_daily_tasks udt 
                        WHERE udt.user_telegram_id = u.telegram_user_id 
                        AND udt.task_date >= ?
                    )
            `, [yesterdayStr]);

            let generatedCount = 0;
            for (const user of activeUsers) {
                try {
                    await this.generateDailyTasksForUser(user.telegram_user_id, today);
                    generatedCount++;
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è ${user.telegram_user_id}:`, error);
                }
            }

            console.log(`‚úÖ [DailyTasksService] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è –¥–ª—è ${generatedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            
            return {
                success: true,
                generated_count: generatedCount,
                date: today
            };

        } catch (error) {
            console.error('‚ùå [DailyTasksService] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
            throw error;
        }
    }
}

module.exports = new DailyTasksService();
