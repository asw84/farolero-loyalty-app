// backend/services/vk.service.js

const axios = require('axios');
const { findOrCreateUser, addPoints } = require('../database');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–∞–ª–ª–æ–≤
const POINTS_FOR_COMMENT = 10;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VK API
const VK_API_VERSION = '5.199';
const VK_ACCESS_TOKEN = process.env.VK_ACCESS_TOKEN;      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
const VK_GROUP_TOKEN = process.env.VK_GROUP_TOKEN;       // –ì—Ä—É–ø–ø–æ–≤–æ–π —Ç–æ–∫–µ–Ω
const VK_SERVICE_KEY = process.env.VK_SERVICE_KEY;       // –°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á
const VK_GROUP_ID = process.env.VK_GROUP_ID;

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ VK.
 * @param {object} eventObject - –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç VK Callback API.
 */
async function handleNewWallReply(eventObject) {
    const { from_id, text } = eventObject;
    console.log(`[VK_SERVICE] –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${from_id}: "${text}"`);

    try {
        // 1. –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ VK ID
        const user = await findOrCreateUser(String(from_id), 'vk_user_id');

        // 2. –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await addPoints(user.id, POINTS_FOR_COMMENT, 'vk', 'comment');

        console.log(`[VK_SERVICE] ‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${POINTS_FOR_COMMENT} –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å VK ID ${from_id}`);

        return { success: true };
    } catch (error) {
        console.error('‚ùå [VK_SERVICE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ VK:', error);
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        return { success: false };
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–ª–µ–Ω–æ–º VK –≥—Ä—É–ø–ø—ã
 * @param {string|number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
 */
async function isMember(userId) {
    try {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤: SERVICE_KEY > GROUP_TOKEN > ACCESS_TOKEN
        const token = VK_SERVICE_KEY || VK_GROUP_TOKEN || VK_ACCESS_TOKEN;
        
        if (!VK_GROUP_ID || !token) {
            console.error('[VK_SERVICE] ‚ùå VK_GROUP_ID –∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            return false;
        }

        console.log(`[VK_SERVICE] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –≥—Ä—É–ø–ø—É ${VK_GROUP_ID}`);
        
        const response = await axios.get('https://api.vk.com/method/groups.isMember', {
            params: {
                group_id: VK_GROUP_ID,
                user_id: userId,
                access_token: token,
                v: VK_API_VERSION
            }
        });

        if (response.data.error) {
            console.error('[VK_SERVICE] ‚ùå –û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', response.data.error.error_msg);
            return false;
        }

        const isMember = response.data.response === 1;
        console.log(`[VK_SERVICE] ${isMember ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${isMember ? '–ø–æ–¥–ø–∏—Å–∞–Ω' : '–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω'} –Ω–∞ –≥—Ä—É–ø–ø—É`);
        
        return isMember;
    } catch (error) {
        console.error('[VK_SERVICE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç
 * @param {string|number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
 * @param {string|number} ownerId - ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å—Ç–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≥—Ä—É–ø–ø)
 * @param {string|number} postId - ID –ø–æ—Å—Ç–∞
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫–Ω—É–ª –ø–æ—Å—Ç
 */
async function hasLikedPost(userId, ownerId, postId) {
    try {
        // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–π–∫–æ–≤ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ACCESS_TOKEN
        if (!VK_ACCESS_TOKEN || VK_ACCESS_TOKEN.includes('YOUR_') || VK_ACCESS_TOKEN.includes('REQUIRED')) {
            console.log('[VK_SERVICE] ‚ö†Ô∏è  VK_ACCESS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–π–∫–æ–≤');
            return await hasLikedPostAlternative(userId, ownerId, postId);
        }

        console.log(`[VK_SERVICE] üëç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –ø–æ—Å—Ç ${ownerId}_${postId}`);
        
        const response = await axios.get('https://api.vk.com/method/likes.isLiked', {
            params: {
                user_id: userId,
                type: 'post',
                owner_id: ownerId,
                item_id: postId,
                access_token: VK_ACCESS_TOKEN,
                v: VK_API_VERSION
            }
        });

        if (response.data.error) {
            console.error('[VK_SERVICE] ‚ùå –û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∞–π–∫–∞:', response.data.error.error_msg);
            console.log('[VK_SERVICE] üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
            return await hasLikedPostAlternative(userId, ownerId, postId);
        }

        const hasLiked = response.data.response.liked === 1;
        console.log(`[VK_SERVICE] ${hasLiked ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${hasLiked ? '–ª–∞–π–∫–Ω—É–ª' : '–Ω–µ –ª–∞–π–∫–∞–ª'} –ø–æ—Å—Ç`);
        
        return hasLiked;
    } catch (error) {
        console.error('[VK_SERVICE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∞–π–∫–∞:', error.message);
        console.log('[VK_SERVICE] üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
        return await hasLikedPostAlternative(userId, ownerId, postId);
    }
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–π–∫–æ–≤ —á–µ—Ä–µ–∑ likes.getList
 */
async function hasLikedPostAlternative(userId, ownerId, postId) {
    try {
        const token = VK_SERVICE_KEY || VK_GROUP_TOKEN || VK_ACCESS_TOKEN;
        
        if (!token) {
            console.error('[VK_SERVICE] ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤');
            return false;
        }

        console.log(`[VK_SERVICE] üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–π–∫–æ–≤ —á–µ—Ä–µ–∑ likes.getList`);
        
        const response = await axios.get('https://api.vk.com/method/likes.getList', {
            params: {
                type: 'post',
                owner_id: ownerId,
                item_id: postId,
                count: 1000, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 1000 –ª–∞–π–∫–æ–≤
                access_token: token,
                v: VK_API_VERSION
            }
        });

        if (response.data.error) {
            console.error('[VK_SERVICE] ‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞:', response.data.error.error_msg);
            return false;
        }

        const likers = response.data.response.items || [];
        const hasLiked = likers.includes(parseInt(userId));
        
        console.log(`[VK_SERVICE] ${hasLiked ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${hasLiked ? '–ª–∞–π–∫–Ω—É–ª' : '–Ω–µ –ª–∞–π–∫–∞–ª'} –ø–æ—Å—Ç (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)`);
        
        return hasLiked;
    } catch (error) {
        console.error('[VK_SERVICE] ‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞:', error.message);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç
 * @param {string|number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
 * @param {string|number} ownerId - ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å—Ç–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≥—Ä—É–ø–ø)
 * @param {string|number} postId - ID –ø–æ—Å—Ç–∞
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç
 */
async function hasCommentedPost(userId, ownerId, postId) {
    try {
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        const tokens = [VK_ACCESS_TOKEN, VK_SERVICE_KEY, VK_GROUP_TOKEN].filter(token => 
            token && !token.includes('YOUR_') && !token.includes('REQUIRED')
        );
        
        if (tokens.length === 0) {
            console.error('[VK_SERVICE] ‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞');
            return false;
        }

        console.log(`[VK_SERVICE] üí¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∫ –ø–æ—Å—Ç—É ${ownerId}_${postId}`);
        
        for (const token of tokens) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É
                const response = await axios.get('https://api.vk.com/method/wall.getComments', {
                    params: {
                        owner_id: ownerId,
                        post_id: postId,
                        count: 100, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 100 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                        access_token: token,
                        v: VK_API_VERSION
                    }
                });

                if (response.data.error) {
                    if (response.data.error.error_msg.includes('authorization failed')) {
                        console.log(`[VK_SERVICE] ‚ö†Ô∏è  –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è wall.getComments, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`);
                        continue;
                    }
                    console.error('[VK_SERVICE] ‚ùå –û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', response.data.error.error_msg);
                    continue;
                }

                const comments = response.data.response.items || [];
                const hasCommented = comments.some(comment => String(comment.from_id) === String(userId));
                
                console.log(`[VK_SERVICE] ${hasCommented ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${hasCommented ? '–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª' : '–Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª'} –ø–æ—Å—Ç`);
                
                return hasCommented;
            } catch (error) {
                console.log(`[VK_SERVICE] ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π:`, error.message);
                continue;
            }
        }
        
        console.error('[VK_SERVICE] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∏ —Å –æ–¥–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º');
        return false;
    } catch (error) {
        console.error('[VK_SERVICE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error.message);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–µ–ø–æ—Å—Ç–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç
 * @param {string|number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
 * @param {string|number} ownerId - ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å—Ç–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≥—Ä—É–ø–ø)
 * @param {string|number} postId - ID –ø–æ—Å—Ç–∞
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–ø–æ—Å—Ç–Ω—É–ª –ø–æ—Å—Ç
 */
async function hasReposted(userId, ownerId, postId) {
    try {
        // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á
        const token = VK_ACCESS_TOKEN || VK_SERVICE_KEY;
        
        if (!token) {
            console.error('[VK_SERVICE] ‚ùå VK_ACCESS_TOKEN –∏–ª–∏ VK_SERVICE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return false;
        }

        console.log(`[VK_SERVICE] üîÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ—Å—Ç–∞ ${ownerId}_${postId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const response = await axios.get('https://api.vk.com/method/wall.get', {
            params: {
                owner_id: userId,
                count: 100, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                filter: 'all',
                access_token: token,
                v: VK_API_VERSION
            }
        });

        if (response.data.error) {
            // –ï—Å–ª–∏ —Å—Ç–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            if (response.data.error.error_code === 15 || response.data.error.error_code === 18) {
                console.log(`[VK_SERVICE] ‚ö†Ô∏è  –°—Ç–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–ø–æ—Å—Ç–∞.`);
                return false;
            }
            
            console.error('[VK_SERVICE] ‚ùå –û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.data.error.error_msg);
            return false;
        }

        const posts = response.data.response.items || [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –ø–æ—Å—Ç–æ–≤ —Ä–µ–ø–æ—Å—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        const hasRepostedPost = posts.some(post => {
            return post.copy_history && 
                   post.copy_history.some(original => 
                       String(original.owner_id) === String(ownerId) && 
                       String(original.id) === String(postId)
                   );
        });
        
        if (hasRepostedPost) {
            console.log(`[VK_SERVICE] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–µ–ø–æ—Å—Ç–Ω—É–ª –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω—É`);
            return true;
        }
        
        // –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–ø–æ—Å—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–∑–∞–∫–ª–∞–¥–∫–∏)
        console.log(`[VK_SERVICE] üîç –û–±—ã—á–Ω–æ–≥–æ —Ä–µ–ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...`);
        const isInFavorites = await checkIfInFavorites(userId, ownerId, postId, token);
        
        if (isInFavorites) {
            console.log(`[VK_SERVICE] ‚úÖ –ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return true;
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        console.log(`[VK_SERVICE] ‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ —Å–¥–µ–ª–∞–ª –æ–±—ã—á–Ω—ã–π —Ä–µ–ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω—É`);
        console.log(`[VK_SERVICE] ‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω)`);
        console.log(`[VK_SERVICE] üí° –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –ø–æ—Å—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –¥–æ–±–∞–≤—å—Ç–µ VK_USER_TOKEN –≤ .env`);
        return false;
    } catch (error) {
        console.error('[VK_SERVICE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ø–æ—Å—Ç–∞:', error.message);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –ø–æ—Å—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string|number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
 * @param {string|number} ownerId - ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å—Ç–∞
 * @param {string|number} postId - ID –ø–æ—Å—Ç–∞  
 * @param {string} token - —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –ø–æ—Å—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
 */
async function checkIfInFavorites(userId, ownerId, postId, token) {
    try {
        // –ú–µ—Ç–æ–¥ fave.getPosts —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á
        if (!VK_ACCESS_TOKEN || 
            VK_ACCESS_TOKEN.includes('YOUR_') || 
            VK_ACCESS_TOKEN.includes('REQUIRED') ||
            VK_ACCESS_TOKEN === VK_SERVICE_KEY) {
            console.log(`[VK_SERVICE] ‚ö†Ô∏è  –ù–µ—Ç –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (fave.getPosts —Ç—Ä–µ–±—É–µ—Ç user token, –∞ –Ω–µ service key)`);
            return false;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π, —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ service key
        if (VK_ACCESS_TOKEN.length > 200) {
            console.log(`[VK_SERVICE] ‚ö†Ô∏è  VK_ACCESS_TOKEN –ø–æ—Ö–æ–∂ –Ω–∞ service key (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π). –ù—É–∂–µ–Ω user access token –¥–ª—è fave.getPosts`);
            return false;
        }

        const response = await axios.get('https://api.vk.com/method/fave.getPosts', {
            params: {
                count: 100, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                access_token: VK_ACCESS_TOKEN,
                v: VK_API_VERSION
            }
        });

        if (response.data.error) {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (response.data.error.error_msg.includes('service token') || 
                response.data.error.error_msg.includes('authorization failed')) {
                console.log(`[VK_SERVICE] ‚ö†Ô∏è  VK_ACCESS_TOKEN —è–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∫–ª—é—á–æ–º, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º`);
                console.log(`[VK_SERVICE] üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω—É–∂–µ–Ω user access token. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.`);
                return false;
            }
            
            console.log(`[VK_SERVICE] ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:`, response.data.error.error_msg);
            return false;
        }

        const favoritePosts = response.data.response.items || [];
        
        // –ò—â–µ–º –Ω–∞—à –ø–æ—Å—Ç —Å—Ä–µ–¥–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        const isInFavorites = favoritePosts.some(post => {
            return String(post.owner_id) === String(ownerId) && 
                   String(post.id) === String(postId);
        });

        return isInFavorites;
    } catch (error) {
        console.log(`[VK_SERVICE] ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:`, error.message);
        return false;
    }
}

module.exports = {
    handleNewWallReply,
    isMember,
    hasLikedPost,
    hasCommentedPost,
    hasReposted,
};
