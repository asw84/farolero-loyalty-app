// backend/test-db-simple.js
// –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

console.log('üóÑÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ë–î
const dbPath = process.env.STORAGE_PATH 
    ? path.join(process.env.STORAGE_PATH, 'farolero_loyalty.db')
    : path.join(__dirname, 'farolero_loyalty.db');

console.log('üìç –ü—É—Ç—å –∫ –ë–î:', dbPath);

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
        process.exit(1);
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å–ø–µ—à–Ω–æ');
});

// –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
const tables = [
    {
        name: 'users',
        sql: `CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_user_id TEXT UNIQUE,
            instagram_user_id TEXT UNIQUE,
            instagram_username TEXT UNIQUE,
            vk_user_id TEXT UNIQUE,
            points INTEGER DEFAULT 0,
            status TEXT DEFAULT '–ë—Ä–æ–Ω–∑–∞',
            pending_points_deduction INTEGER DEFAULT 0,
            referrer_id INTEGER,
            synced_with_amo BOOLEAN DEFAULT 0,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (referrer_id) REFERENCES users (id)
        )`
    },
    {
        name: 'activity',
        sql: `CREATE TABLE IF NOT EXISTS activity (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            source TEXT NOT NULL,
            activity_type TEXT NOT NULL,
            points_awarded INTEGER NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )`
    },
    {
        name: 'referrals',
        sql: `CREATE TABLE IF NOT EXISTS referrals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            referrer_telegram_id TEXT NOT NULL,
            referee_telegram_id TEXT NOT NULL,
            referral_code TEXT UNIQUE NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            activated_at DATETIME,
            bonus_paid BOOLEAN DEFAULT FALSE,
            bonus_amount INTEGER DEFAULT 0,
            FOREIGN KEY (referrer_telegram_id) REFERENCES users (telegram_user_id),
            FOREIGN KEY (referee_telegram_id) REFERENCES users (telegram_user_id)
        )`
    },
    {
        name: 'purchases',
        sql: `CREATE TABLE IF NOT EXISTS purchases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_telegram_id TEXT NOT NULL,
            amount DECIMAL(10,2) NOT NULL,
            purchase_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            source TEXT DEFAULT 'qtickets',
            order_id TEXT,
            FOREIGN KEY (user_telegram_id) REFERENCES users (telegram_user_id)
        )`
    },
    {
        name: 'rfm_segments',
        sql: `CREATE TABLE IF NOT EXISTS rfm_segments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_telegram_id TEXT UNIQUE NOT NULL,
            recency_score INTEGER CHECK(recency_score >= 1 AND recency_score <= 5),
            frequency_score INTEGER CHECK(frequency_score >= 1 AND frequency_score <= 5),
            monetary_score INTEGER CHECK(monetary_score >= 1 AND monetary_score <= 5),
            segment_name TEXT,
            calculated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_telegram_id) REFERENCES users (telegram_user_id)
        )`
    }
];

let tablesCreated = 0;

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
function createNextTable() {
    if (tablesCreated >= tables.length) {
        console.log('');
        console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
        createIndexes();
        return;
    }

    const table = tables[tablesCreated];
    console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${table.name}`);
    
    db.run(table.sql, (err) => {
        if (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${table.name}:`, err.message);
            process.exit(1);
        } else {
            console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table.name} –≥–æ—Ç–æ–≤–∞`);
            tablesCreated++;
            createNextTable();
        }
    });
}

function createIndexes() {
    const indexes = [
        'CREATE INDEX IF NOT EXISTS idx_referral_code ON referrals(referral_code)',
        'CREATE INDEX IF NOT EXISTS idx_referrer ON referrals(referrer_telegram_id)',
        'CREATE INDEX IF NOT EXISTS idx_user_purchases ON purchases(user_telegram_id)',
        'CREATE INDEX IF NOT EXISTS idx_purchase_date ON purchases(purchase_date)'
    ];

    let indexesCreated = 0;

    function createNextIndex() {
        if (indexesCreated >= indexes.length) {
            console.log('');
            console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
            console.log('üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
            tables.forEach(table => {
                console.log(`   ‚úÖ ${table.name}`);
            });
            console.log('');
            console.log('üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä: node server.js');
            
            db.close((err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err.message);
                } else {
                    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
                }
                process.exit(0);
            });
            return;
        }

        const indexSql = indexes[indexesCreated];
        console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ ${indexesCreated + 1}/${indexes.length}`);
        
        db.run(indexSql, (err) => {
            if (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞:`, err.message);
            } else {
                console.log(`‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω`);
            }
            indexesCreated++;
            createNextIndex();
        });
    }

    createNextIndex();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
createNextTable();
