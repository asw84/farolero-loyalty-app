// backend/scripts/create-daily-tasks-tables.js
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

const { getDbConnection, dbRun } = require('../database');

async function createDailyTasksTables() {
    console.log('üìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...');
    
    // –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–ø–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    const createDailyTasksTableSql = `
        CREATE TABLE IF NOT EXISTS daily_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE NOT NULL,
            name TEXT NOT NULL,
            description TEXT NOT NULL,
            icon TEXT NOT NULL,
            points_reward INTEGER DEFAULT 0,
            task_type TEXT NOT NULL, -- 'social', 'purchase', 'visit', 'checkin'
            target_value INTEGER DEFAULT 1,
            difficulty TEXT DEFAULT 'easy', -- 'easy', 'medium', 'hard'
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    const createUserDailyTasksTableSql = `
        CREATE TABLE IF NOT EXISTS user_daily_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_telegram_id TEXT NOT NULL,
            daily_task_id INTEGER NOT NULL,
            task_date DATE NOT NULL, -- –î–∞—Ç–∞ –∫–æ–≥–¥–∞ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
            current_progress INTEGER DEFAULT 0,
            is_completed BOOLEAN DEFAULT 0,
            completed_at DATETIME,
            points_earned INTEGER DEFAULT 0,
            FOREIGN KEY (user_telegram_id) REFERENCES users (telegram_user_id),
            FOREIGN KEY (daily_task_id) REFERENCES daily_tasks (id),
            UNIQUE(user_telegram_id, daily_task_id, task_date)
        );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∏–∫–∏ (–ø–æ–¥—Ä—è–¥ –¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π)
    const createUserStreaksTableSql = `
        CREATE TABLE IF NOT EXISTS user_streaks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_telegram_id TEXT UNIQUE NOT NULL,
            current_streak INTEGER DEFAULT 0,
            longest_streak INTEGER DEFAULT 0,
            last_activity_date DATE,
            total_days_active INTEGER DEFAULT 0,
            streak_bonus_earned INTEGER DEFAULT 0,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_telegram_id) REFERENCES users (telegram_user_id)
        );
    `;

    try {
        await dbRun(createDailyTasksTableSql);
        console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'daily_tasks' —Å–æ–∑–¥–∞–Ω–∞");
        
        await dbRun(createUserDailyTasksTableSql);
        console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'user_daily_tasks' —Å–æ–∑–¥–∞–Ω–∞");
        
        await dbRun(createUserStreaksTableSql);
        console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'user_streaks' —Å–æ–∑–¥–∞–Ω–∞");
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await dbRun('CREATE INDEX IF NOT EXISTS idx_daily_tasks_code ON daily_tasks(code);');
        await dbRun('CREATE INDEX IF NOT EXISTS idx_daily_tasks_type ON daily_tasks(task_type);');
        await dbRun('CREATE INDEX IF NOT EXISTS idx_user_daily_tasks_user_date ON user_daily_tasks(user_telegram_id, task_date);');
        await dbRun('CREATE INDEX IF NOT EXISTS idx_user_daily_tasks_completed ON user_daily_tasks(is_completed);');
        await dbRun('CREATE INDEX IF NOT EXISTS idx_user_streaks_user ON user_streaks(user_telegram_id);');
        
        console.log("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã");
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        await seedDailyTasks();
        
        console.log("üéâ –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
        return true;
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:", error);
        throw error;
    }
}

async function seedDailyTasks() {
    console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...');
    
    const dailyTasks = [
        // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
        {
            code: 'DAILY_CHECKIN',
            name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥',
            description: '–ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            icon: 'üì±',
            points_reward: 10,
            task_type: 'visit',
            target_value: 1,
            difficulty: 'easy'
        },
        {
            code: 'DAILY_PROFILE_VIEW',
            name: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å',
            description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
            icon: 'üë§',
            points_reward: 5,
            task_type: 'visit',
            target_value: 1,
            difficulty: 'easy'
        },
        
        // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        {
            code: 'DAILY_VK_ACTIVITY',
            name: 'VK –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            description: '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –ø–æ—Å—Ç—É –≤ VK',
            icon: 'üíô',
            points_reward: 15,
            task_type: 'social',
            target_value: 1,
            difficulty: 'easy'
        },
        {
            code: 'DAILY_INSTAGRAM_ACTIVITY',
            name: 'Instagram –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            description: '–û–ø—É–±–ª–∏–∫—É–π—Ç–µ story –≤ Instagram',
            icon: 'üì∑',
            points_reward: 20,
            task_type: 'social',
            target_value: 1,
            difficulty: 'medium'
        },
        
        // –ó–∞–¥–∞–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        {
            code: 'DAILY_REFERRAL_SHARE',
            name: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏',
            description: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö',
            icon: 'üîó',
            points_reward: 25,
            task_type: 'social',
            target_value: 1,
            difficulty: 'medium'
        },
        {
            code: 'DAILY_WALK_VIEW',
            name: '–ò–∑—É—á–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 3 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            icon: 'üé≠',
            points_reward: 15,
            task_type: 'visit',
            target_value: 3,
            difficulty: 'easy'
        },
        
        // –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (—Ä–µ–∂–µ)
        {
            code: 'DAILY_PURCHASE_TASK',
            name: '–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É',
            description: '–ö—É–ø–∏—Ç–µ –±–∏–ª–µ—Ç –Ω–∞ –ª—é–±–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
            icon: 'üé´',
            points_reward: 50,
            task_type: 'purchase',
            target_value: 1,
            difficulty: 'hard'
        },
        {
            code: 'DAILY_POINTS_SPEND',
            name: '–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ –±–∞–ª–ª—ã',
            description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–ª–ª—ã –¥–ª—è —Å–∫–∏–¥–∫–∏',
            icon: 'üí∞',
            points_reward: 30,
            task_type: 'purchase',
            target_value: 1,
            difficulty: 'medium'
        },
        
        // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ" –∑–∞–¥–∞–Ω–∏—è (–ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–µ–∂–µ)
        {
            code: 'WEEKLY_ACHIEVEMENT_HUNT',
            name: '–û—Ö–æ—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏',
            description: '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            icon: 'üèÜ',
            points_reward: 100,
            task_type: 'visit',
            target_value: 1,
            difficulty: 'hard'
        },
        {
            code: 'WEEKLY_STATUS_BOOST',
            name: '–ü–æ–≤—ã—Å—å—Ç–µ —Å—Ç–∞—Ç—É—Å',
            description: '–ù–∞–∫–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞',
            icon: '‚≠ê',
            points_reward: 75,
            task_type: 'visit',
            target_value: 1,
            difficulty: 'hard'
        }
    ];
    
    for (const task of dailyTasks) {
        try {
            await dbRun(`
                INSERT OR IGNORE INTO daily_tasks 
                (code, name, description, icon, points_reward, task_type, target_value, difficulty)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            `, [
                task.code,
                task.name, 
                task.description,
                task.icon,
                task.points_reward,
                task.task_type,
                task.target_value,
                task.difficulty
            ]);
            
            console.log(`‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ "${task.name}" –¥–æ–±–∞–≤–ª–µ–Ω–æ`);
        } catch (error) {
            console.log(`‚ö†Ô∏è –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ "${task.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
    }
}

if (require.main === module) {
    createDailyTasksTables()
        .then(() => {
            console.log('üìÖ –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { createDailyTasksTables, seedDailyTasks };
