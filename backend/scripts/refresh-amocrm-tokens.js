// backend/scripts/refresh-amocrm-tokens.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ AmoCRM

require('dotenv').config();
const TokenManager = require('../utils/token-manager');
const amocrmClient = require('../amocrm/apiClient');

async function refreshTokens() {
    console.log('=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ AmoCRM ===');
    
    try {
        const tokenManager = TokenManager.getInstance('amocrm');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        const currentTokens = await tokenManager.getTokens();
        console.log('–¢–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã:');
        console.log('- access_token:', currentTokens.access_token ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        console.log('- refresh_token:', currentTokens.refresh_token ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        console.log('- created_at:', currentTokens.created_at);
        console.log('- expires_in:', currentTokens.expires_in);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ refresh_token
        if (!currentTokens.refresh_token) {
            console.log('‚ùå Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.');
            console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3001/api/amocrm/init');
            return false;
        }
        
        // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã...');
        const newAccessToken = await amocrmClient.refreshTokens();
        
        if (newAccessToken) {
            console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            const updatedTokens = await tokenManager.getTokens();
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:');
            console.log('- access_token:', updatedTokens.access_token ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            console.log('- refresh_token:', updatedTokens.refresh_token ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            console.log('- created_at:', updatedTokens.created_at);
            console.log('- expires_in:', updatedTokens.expires_in);
            
            return true;
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
        
        if (error.message.includes('refresh_token') || error.response?.data?.error === 'invalid_grant') {
            console.log('‚ö†Ô∏è Refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.');
            console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3001/api/amocrm/init');
        }
        
        return false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
refreshTokens().then(success => {
    if (success) {
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
    } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã');
        process.exit(1);
    }
}).catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});