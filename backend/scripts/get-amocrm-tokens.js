#!/usr/bin/env node
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ AmoCRM
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/get-amocrm-tokens.js

const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
require('dotenv').config();

const amocrmClient = require('../amocrm/apiClient');

async function getTokens() {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ AmoCRM...');
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ auth_code –≤ amocrm.json
        const configPath = path.join(__dirname, '..', 'amocrm', 'amocrm.json');
        
        if (!fs.existsSync(configPath)) {
            console.error('‚ùå –§–∞–π–ª amocrm.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            console.log('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª amocrm.json —Å auth_code');
            return;
        }
        
        const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
        
        if (!config.auth_code) {
            console.error('‚ùå auth_code –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ amocrm.json!');
            console.log('üìù –î–æ–±–∞–≤—å—Ç–µ —Å–≤–µ–∂–∏–π auth_code –≤ —Ñ–∞–π–ª amocrm.json');
            return;
        }
        
        console.log('‚úÖ auth_code –Ω–∞–π–¥–µ–Ω, –¥–ª–∏–Ω–∞:', config.auth_code.length);
        
        // 2. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
        console.log('üîë –û–±–º–µ–Ω–∏–≤–∞–µ–º auth_code –Ω–∞ —Ç–æ–∫–µ–Ω—ã...');
        
        const tokens = await amocrmClient.getInitialToken();
        
        console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!');
        console.log('üìÖ Access token expires in:', Math.floor(tokens.expires_in / 3600), 'hours');
        console.log('üíæ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:', process.env.TOKENS_PATH || '/app/tokens/tokens.json');
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        const tokensPath = process.env.TOKENS_PATH || path.join(__dirname, '..', 'tokens', 'tokens.json');
        
        if (fs.existsSync(tokensPath)) {
            const savedTokens = JSON.parse(fs.readFileSync(tokensPath, 'utf-8'));
            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–∫–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            console.log('üïê –°–æ–∑–¥–∞–Ω:', new Date(savedTokens.created_at * 1000).toLocaleString());
        }
        
        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AmoCRM...');
        
        const testRequest = await amocrmClient.makeRequest('/api/v4/account');
        
        if (testRequest && testRequest.id) {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AmoCRM —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            console.log('üè¢ –ê–∫–∫–∞—É–Ω—Ç:', testRequest.name || 'N/A');
        }
        
        console.log('\nüéâ –£—Å–ø–µ—Ö! –¢–æ–∫–µ–Ω—ã AmoCRM –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
        
        if (error.response && error.response.data) {
            console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
            
            if (error.response.data.hint === 'Authorization code has expired') {
                console.log('\nüí° –†–µ—à–µ–Ω–∏–µ:');
                console.log('1. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
                console.log('   node generate-auth-url.js');
                console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ auth_code –≤ amocrm.json');
                console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
            }
        }
        
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
async function checkCurrentTokens() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤...');
    
    const tokensPath = process.env.TOKENS_PATH || path.join(__dirname, '..', 'tokens', 'tokens.json');
    
    if (!fs.existsSync(tokensPath)) {
        console.log('‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
    }
    
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensPath, 'utf-8'));
        const now = Math.floor(Date.now() / 1000);
        const expiresAt = tokens.created_at + tokens.expires_in;
        const timeLeft = expiresAt - now;
        
        console.log('üìÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:', new Date(tokens.created_at * 1000).toLocaleString());
        console.log('‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:', Math.floor(timeLeft / 3600), '—á–∞—Å–æ–≤');
        
        if (timeLeft <= 0) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
            return false;
        } else if (timeLeft < 3600) {
            console.log('‚ö†Ô∏è  –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ!');
            return false;
        } else {
            console.log('‚úÖ –¢–æ–∫–µ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω');
            return true;
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
async function main() {
    console.log('üöÄ AmoCRM Token Manager\n');
    
    const args = process.argv.slice(2);
    
    if (args.includes('--check') || args.includes('-c')) {
        await checkCurrentTokens();
        return;
    }
    
    if (args.includes('--help') || args.includes('-h')) {
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
        console.log('  node scripts/get-amocrm-tokens.js          # –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã');
        console.log('  node scripts/get-amocrm-tokens.js --check  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã');
        console.log('  node scripts/get-amocrm-tokens.js --help   # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã —Å–Ω–∞—á–∞–ª–∞
    const tokensValid = await checkCurrentTokens();
    
    if (tokensValid) {
        console.log('\nüí° –¢–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã. –ù—É–∂–Ω—ã –Ω–æ–≤—ã–µ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force');
        if (!args.includes('--force')) {
            return;
        }
    }
    
    console.log('\nüîÑ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã...\n');
    await getTokens();
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
});
