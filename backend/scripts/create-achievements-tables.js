// backend/scripts/create-achievements-tables.js
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

const { getDbConnection, dbRun } = require('../database');

async function createAchievementsTables() {
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');
    
    // –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const createAchievementsTableSql = `
        CREATE TABLE IF NOT EXISTS achievements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE NOT NULL,
            name TEXT NOT NULL,
            description TEXT NOT NULL,
            icon TEXT NOT NULL,
            points_reward INTEGER DEFAULT 0,
            category TEXT NOT NULL,
            condition_type TEXT NOT NULL, -- 'count', 'threshold', 'milestone'
            condition_value INTEGER NOT NULL,
            condition_field TEXT, -- 'purchases', 'referrals', 'activity', 'points'
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const createUserAchievementsTableSql = `
        CREATE TABLE IF NOT EXISTS user_achievements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_telegram_id TEXT NOT NULL,
            achievement_id INTEGER NOT NULL,
            unlocked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            current_progress INTEGER DEFAULT 0,
            is_completed BOOLEAN DEFAULT 0,
            notified BOOLEAN DEFAULT 0,
            FOREIGN KEY (user_telegram_id) REFERENCES users (telegram_user_id),
            FOREIGN KEY (achievement_id) REFERENCES achievements (id),
            UNIQUE(user_telegram_id, achievement_id)
        );
    `;

    try {
        await dbRun(createAchievementsTableSql);
        console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'achievements' —Å–æ–∑–¥–∞–Ω–∞");
        
        await dbRun(createUserAchievementsTableSql);
        console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'user_achievements' —Å–æ–∑–¥–∞–Ω–∞");
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await dbRun('CREATE INDEX IF NOT EXISTS idx_achievements_code ON achievements(code);');
        await dbRun('CREATE INDEX IF NOT EXISTS idx_achievements_category ON achievements(category);');
        await dbRun('CREATE INDEX IF NOT EXISTS idx_user_achievements_user ON user_achievements(user_telegram_id);');
        await dbRun('CREATE INDEX IF NOT EXISTS idx_user_achievements_completed ON user_achievements(is_completed);');
        
        console.log("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã");
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        await seedAchievements();
        
        console.log("üéâ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
        return true;
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", error);
        throw error;
    }
}

async function seedAchievements() {
    console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');
    
    const achievements = [
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –ø–æ–∫—É–ø–∫–∞–º
        {
            code: 'FIRST_PURCHASE',
            name: '–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞',
            description: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–æ–π!',
            icon: 'üõçÔ∏è',
            points_reward: 100,
            category: 'purchases',
            condition_type: 'count',
            condition_value: 1,
            condition_field: 'purchases'
        },
        {
            code: 'PURCHASE_5',
            name: '–ß–∞—Å—Ç—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å',
            description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ 5 –ø–æ–∫—É–ø–æ–∫',
            icon: 'üõí',
            points_reward: 200,
            category: 'purchases',
            condition_type: 'count',
            condition_value: 5,
            condition_field: 'purchases'
        },
        {
            code: 'PURCHASE_10',
            name: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
            description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ 10 –ø–æ–∫—É–ø–æ–∫',
            icon: 'üè™',
            points_reward: 500,
            category: 'purchases',
            condition_type: 'count',
            condition_value: 10,
            condition_field: 'purchases'
        },
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
        {
            code: 'FIRST_REFERRAL',
            name: '–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥',
            description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞',
            icon: 'üë•',
            points_reward: 150,
            category: 'referrals',
            condition_type: 'count',
            condition_value: 1,
            condition_field: 'referrals'
        },
        {
            code: 'REFERRAL_5',
            name: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π',
            description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π',
            icon: 'üåü',
            points_reward: 300,
            category: 'referrals',
            condition_type: 'count',
            condition_value: 5,
            condition_field: 'referrals'
        },
        {
            code: 'REFERRAL_10',
            name: '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä',
            description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 –¥—Ä—É–∑–µ–π',
            icon: 'üëë',
            points_reward: 1000,
            category: 'referrals',
            condition_type: 'count',
            condition_value: 10,
            condition_field: 'referrals'
        },
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –±–∞–ª–ª–∞–º
        {
            code: 'POINTS_1000',
            name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
            description: '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 –±–∞–ª–ª–æ–≤',
            icon: 'üíé',
            points_reward: 100,
            category: 'points',
            condition_type: 'threshold',
            condition_value: 1000,
            condition_field: 'points'
        },
        {
            code: 'POINTS_5000',
            name: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å',
            description: '–ù–∞–∫–æ–ø–∏—Ç–µ 5000 –±–∞–ª–ª–æ–≤',
            icon: 'üí∞',
            points_reward: 500,
            category: 'points',
            condition_type: 'threshold',
            condition_value: 5000,
            condition_field: 'points'
        },
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        {
            code: 'STATUS_SILVER',
            name: '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
            description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–µ—Ä–µ–±—Ä—è–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞',
            icon: 'ü•à',
            points_reward: 250,
            category: 'status',
            condition_type: 'milestone',
            condition_value: 1,
            condition_field: 'status_silver'
        },
        {
            code: 'STATUS_GOLD',
            name: '–ó–æ–ª–æ—Ç–æ–π —Å—Ç–∞—Ç—É—Å',
            description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –∑–æ–ª–æ—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞',
            icon: 'ü•á',
            points_reward: 500,
            category: 'status',
            condition_type: 'milestone',
            condition_value: 1,
            condition_field: 'status_gold'
        },
        {
            code: 'STATUS_PLATINUM',
            name: '–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å',
            description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –ø–ª–∞—Ç–∏–Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞',
            icon: 'üíé',
            points_reward: 1000,
            category: 'status',
            condition_type: 'milestone',
            condition_value: 1,
            condition_field: 'status_platinum'
        },
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        {
            code: 'SOCIAL_VK_CONNECT',
            name: 'VK –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
            description: '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ VK –∞–∫–∫–∞—É–Ω—Ç',
            icon: 'üîó',
            points_reward: 50,
            category: 'social',
            condition_type: 'milestone',
            condition_value: 1,
            condition_field: 'vk_connected'
        },
        {
            code: 'SOCIAL_INSTAGRAM_CONNECT',
            name: 'Instagram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
            description: '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Instagram –∞–∫–∫–∞—É–Ω—Ç',
            icon: 'üì∑',
            points_reward: 50,
            category: 'social',
            condition_type: 'milestone',
            condition_value: 1,
            condition_field: 'instagram_connected'
        }
    ];
    
    for (const achievement of achievements) {
        try {
            await dbRun(`
                INSERT OR IGNORE INTO achievements 
                (code, name, description, icon, points_reward, category, condition_type, condition_value, condition_field)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            `, [
                achievement.code,
                achievement.name, 
                achievement.description,
                achievement.icon,
                achievement.points_reward,
                achievement.category,
                achievement.condition_type,
                achievement.condition_value,
                achievement.condition_field
            ]);
            
            console.log(`‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.name}" –¥–æ–±–∞–≤–ª–µ–Ω–æ`);
        } catch (error) {
            console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
    }
}

if (require.main === module) {
    createAchievementsTables()
        .then(() => {
            console.log('üéØ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { createAchievementsTables, seedAchievements };
