#!/usr/bin/env node
// backend/scripts/monitor-amocrm.js
// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ AmoCRM

require('dotenv').config();
const { restoreTokens } = require('./restore-amocrm-tokens');

async function monitorAmoCRM() {
    try {
        console.log('üîç [MONITOR] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è AmoCRM —Ç–æ–∫–µ–Ω–æ–≤...');
        
        const amocrmClient = require('../amocrm/apiClient');
        const client = await amocrmClient.getAuthorizedClient();
        const response = await client.get('/api/v4/account');
        
        console.log('‚úÖ [MONITOR] AmoCRM —Ç–æ–∫–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log(`üìä [MONITOR] –ê–∫–∫–∞—É–Ω—Ç: ${response.data.name}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        if (process.env.TELEGRAM_MONITOR_CHAT_ID && process.env.TELEGRAM_BOT_TOKEN) {
            const message = `‚úÖ AmoCRM Status OK\n–ê–∫–∫–∞—É–Ω—Ç: ${response.data.name}\n–í—Ä–µ–º—è: ${new Date().toLocaleString()}`;
            await sendTelegramNotification(message);
        }
        
    } catch (error) {
        console.error('‚ùå [MONITOR] –û—à–∏–±–∫–∞ –≤ AmoCRM —Ç–æ–∫–µ–Ω–∞—Ö:', error.message);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (process.env.TELEGRAM_MONITOR_CHAT_ID && process.env.TELEGRAM_BOT_TOKEN) {
            const message = `üö® AmoCRM ERROR\n–û—à–∏–±–∫–∞: ${error.message}\n–í—Ä–µ–º—è: ${new Date().toLocaleString()}\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤!`;
            await sendTelegramNotification(message);
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        try {
            console.log('üîÑ [MONITOR] –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
            await restoreTokens();
        } catch (restoreError) {
            console.error('‚ùå [MONITOR] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', restoreError.message);
        }
    }
}

async function sendTelegramNotification(message) {
    try {
        const axios = require('axios');
        const url = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        await axios.post(url, {
            chat_id: process.env.TELEGRAM_MONITOR_CHAT_ID,
            text: message,
            parse_mode: 'HTML'
        });
        
        console.log('üì± [MONITOR] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    } catch (error) {
        console.error('‚ùå [MONITOR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    monitorAmoCRM().then(() => {
        process.exit(0);
    }).catch((error) => {
        console.error('‚ùå [MONITOR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = { monitorAmoCRM };
