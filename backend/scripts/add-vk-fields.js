// backend/scripts/add-vk-fields.js
// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ VK –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = '/app/farolero.db'; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ

console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ VK –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users...');
console.log('üìç –ü—É—Ç—å –∫ –ë–î:', dbPath);

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
        process.exit(1);
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å–ø–µ—à–Ω–æ');
});

// –ò—Å–ø–æ–ª—å–∑—É–µ–º async –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è sqlite3
async function addVKFields() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        const tableInfo = await new Promise((resolve, reject) => {
            db.all("PRAGMA table_info(users)", (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        });
        
        const existingColumns = tableInfo.map(col => col.name);
        console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', existingColumns);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ VK –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const vkFields = [
            { name: 'vk_id', type: 'TEXT' },
            { name: 'vk_first_name', type: 'TEXT' },
            { name: 'vk_last_name', type: 'TEXT' },
            { name: 'vk_photo', type: 'TEXT' }
        ];

        for (const field of vkFields) {
            if (!existingColumns.includes(field.name)) {
                const alterSql = `ALTER TABLE users ADD COLUMN ${field.name} ${field.type}`;
                console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ: ${field.name}`);
                
                await new Promise((resolve, reject) => {
                    db.run(alterSql, (err) => {
                        if (err) reject(err);
                        else resolve();
                    });
                });
            } else {
                console.log(`‚úÖ –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${field.name}`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        const finalInfo = await new Promise((resolve, reject) => {
            db.all("PRAGMA table_info(users)", (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        });
        
        console.log('üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
        finalInfo.forEach(col => {
            console.log(`  - ${col.name}: ${col.type}${col.notnull ? ' NOT NULL' : ''}${col.pk ? ' PRIMARY KEY' : ''}`);
        });

        console.log('‚úÖ VK –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ VK –ø–æ–ª–µ–π:', error);
        process.exit(1);
    } finally {
        db.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
setTimeout(addVKFields, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
