// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –£—Å–ª–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ dotenv ---
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env –¢–û–õ–¨–ö–û –≤ —Å—Ä–µ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
// –í Docker (production) –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ Docker Compose.
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

const express = require('express');
const cors = require('cors');
const fileUpload = require('express-fileupload');

// --- –ò–ú–ü–û–†–¢–´ ---
const walkService = require('./services/walk.service');
const orderController = require('./controllers/order.controller');
const { initializeDatabase } = require('./database');
const VKConfigValidator = require('./utils/vk_config_validator');
const { bootstrapModules, injectModules } = require('./modules/bootstrap');

// --- –ò–ú–ü–û–†–¢–´ –ú–ê–†–®–†–£–¢–û–í ---
const walkRoutes = require('./routes/walk.routes');
const userRoutes = require('./routes/user.routes');
const orderRoutes = require('./routes/order.routes');
const webhookRoutes = require('./routes/webhook.routes');
const adminRoutes = require('./routes/admin.routes');
const socialRoutes = require('./routes/social.routes');
const amocrmRoutes = require('./routes/amocrm.routes');
const vkRoutes = require('./routes/vk.routes');
const instagramRoutes = require('./routes/instagram.routes');
const vkOAuthRoutes = require('./routes/vk_oauth_routes');
const vkConfigRoutes = require('./routes/vk_config_routes');
const vkConfigOnlyRoutes = require('./routes/vk_config_only_routes');
const vkTestRoutes = require('./routes/vk_test_routes');
const activityRoutes = require('./routes/activity.routes');
const referralRoutes = require('./routes/referral.routes');
const analyticsRoutes = require('./routes/analytics.routes');
const healthRoutes = require('./routes/health.routes');
const statusRoutes = require('./routes/status.routes');
const achievementsRoutes = require('./routes/achievements.routes');
const dailyTasksRoutes = require('./routes/daily-tasks.routes');
const activityCalendarRoutes = require('./routes/activity-calendar.routes');
const oauthRouter = require('./routes/oauth');
const socialRouter = require('./routes/social');
const authRouter = require('./routes/auth');

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
const app = express();
const PORT = process.env.PORT || 3001;

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (—Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã) ---
const WALK_URLS = {
    1578: 'https://t.me/QticketsBuyBot/buy?startapp=1578', 17333: 'https://t.me/QticketsBuyBot/buy?startapp=17333',
    16423: 'https://t.me/QticketsBuyBot/buy?startapp=16423', 1562: 'https://t.me/QticketsBuyBot/buy?startapp=1562',
    32248: 'https://t.me/QticketsBuyBot/buy?startapp=32248', 5623: 'https://t.me/QticketsBuyBot/buy?startapp=5623',
    25437: 'https://t.me/QticketsBuyBot/buy?startapp=25437', 18920: 'https://t.me/QticketsBuyBot/buy?startapp=18920',
    2616: 'https://t.me/QticketsBuyBot/buy?startapp=2616',
};

// --- MIDDLEWARE ---
app.use(cors({ origin: '*' }));
// –í–∞–∂–Ω–æ! express.json() —Å verify –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç (–≤–µ–±—Ö—É–∫–∏)
app.use(express.json({ verify: (req, res, buf) => { req.rawBody = buf; } }));
// Middleware –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
app.use(fileUpload({
    limits: { fileSize: 50 * 1024 * 1024 }, // 50MB max
    abortOnLimit: true
}));

// --- –í–ù–ï–î–†–ï–ù–ò–ï –ú–û–î–£–õ–ï–ô ---
app.use(injectModules);

// --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ó–ê–ü–†–û–°–û–í –î–õ–Ø –û–¢–õ–ê–î–ö–ò ---
app.use((req, res, next) => {
    console.log(`[REQUEST] ${req.method} ${req.url} - ${new Date().toISOString()}`);
    console.log('[REQUEST HEADERS]', req.headers);
    console.log('[REQUEST BODY]', req.body);
    next();
});

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í ---
orderController.init(WALK_URLS);

// --- HEALTH CHECK ENDPOINT ---
app.get('/health', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        const healthStatus = {
            status: 'OK',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            version: process.env.npm_package_version || '1.0.0',
            environment: process.env.NODE_ENV || 'development',
            checks: {}
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try {
            const { dbGet } = require('./database');
            await dbGet('SELECT 1 as test');
            healthStatus.checks.database = 'OK';
        } catch (dbError) {
            healthStatus.checks.database = 'ERROR: ' + dbError.message;
            healthStatus.status = 'DEGRADED';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        try {
            const fs = require('fs');
            const testPath = process.env.STORAGE_PATH || './';
            fs.accessSync(testPath, fs.constants.R_OK | fs.constants.W_OK);
            healthStatus.checks.filesystem = 'OK';
        } catch (fsError) {
            healthStatus.checks.filesystem = 'ERROR: ' + fsError.message;
            healthStatus.status = 'DEGRADED';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ AmoCRM —Ç–æ–∫–µ–Ω–æ–≤
        try {
            const fs = require('fs');
            const path = require('path');
            const tokensPath = path.join(process.env.TOKENS_PATH, 'tokens.json');
            if (fs.existsSync(tokensPath)) {
                const tokens = JSON.parse(fs.readFileSync(tokensPath, 'utf8'));
                if (tokens && tokens.refresh_token) {
                    healthStatus.checks.amocrm_tokens = 'OK';
                } else {
                    healthStatus.checks.amocrm_tokens = 'WARNING: No refresh token';
                    if (healthStatus.status === 'OK') healthStatus.status = 'WARNING';
                }
            } else {
                healthStatus.checks.amocrm_tokens = 'WARNING: Tokens file not found';
                if (healthStatus.status === 'OK') healthStatus.status = 'WARNING';
            }
        } catch (amocrmError) {
            healthStatus.checks.amocrm_tokens = 'ERROR: ' + amocrmError.message;
            if (healthStatus.status === 'OK') healthStatus.status = 'DEGRADED';
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        const statusCode = healthStatus.status === 'OK' ? 200 : 
                          healthStatus.status === 'WARNING' ? 200 : 503;

        res.status(statusCode).json(healthStatus);

    } catch (error) {
        res.status(503).json({
            status: 'ERROR',
            timestamp: new Date().toISOString(),
            error: error.message
        });
    }
});

// Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/api/test/db', async (req, res) => {
    try {
        const { dbGet } = require('./database');
        const result = await dbGet('SELECT COUNT(*) as count FROM users');
        res.json({
            success: true,
            message: 'Database connection OK',
            user_count: result.count
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–ï–ô (–ü–ï–†–ï–î –º–∞—Ä—à—Ä—É—Ç–∞–º–∏) ---
const modules = bootstrapModules();
console.log('üß© –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞');

// --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø API –ú–ê–†–®–†–£–¢–û–í ---
// –ë—ç–∫–µ–Ω–¥ —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /api
app.use('/api', walkRoutes);
app.use('/api', userRoutes);
app.use('/api', orderRoutes);
app.use('/api', webhookRoutes);
app.use('/api', adminRoutes);
app.use('/api', socialRoutes);
app.use('/api/amocrm', amocrmRoutes);
console.log('Registering VK OAuth routes...');
app.use('/api/oauth/vk', vkOAuthRoutes);
console.log('Registering VK config routes...');
app.use('/api/vk/config', vkConfigRoutes);
console.log('Registering VK config only routes...');
app.use('/api/vk', vkConfigOnlyRoutes);
console.log('Registering VK test routes...');
app.use('/api/vk/test', vkTestRoutes);
console.log('Registering VK routes...');
app.use('/api/webhooks', vkRoutes);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è VK Callback API –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api
// –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ VK
app.use('/webhooks', vkRoutes);
console.log('Registering Instagram routes...');
app.use('/api', instagramRoutes);
console.log('Registering Instagram activity routes...');
app.use('/api/instagram', require('./routes/instagram-activity.routes'));
app.use('/api', activityRoutes);
app.use('/api', referralRoutes);
app.use('/api', analyticsRoutes);
app.use('/api/status', statusRoutes);
app.use('/api/achievements', achievementsRoutes);
app.use('/api/daily-tasks', dailyTasksRoutes);
app.use('/api/activity-calendar', activityCalendarRoutes);
app.use('/api/qtickets/cashback', require('./routes/qtickets-cashback.routes'));
app.use('/api/purchases', require('./routes/purchase-history.routes'));
app.use('/health', healthRoutes);
app.use('/api/oauth', oauthRouter);
app.use('/api/social', socialRouter);
app.use('/auth', authRouter);

// –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –í–ö
app.use('/auth', vkOAuthRoutes);

// --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –û–¢–õ–ê–î–ö–ò ---
app.use((req, res) => {
    console.log(`[UNHANDLED REQUEST] ${req.method} ${req.url}`);
    console.log('[UNHANDLED HEADERS]', req.headers);
    console.log('[UNHANDLED BODY]', req.body);
    res.status(404).json({
        error: 'Route not found',
        method: req.method,
        url: req.url,
        message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∏ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞'
    });
});

// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –ë–õ–û–ö –†–ê–ó–î–ê–ß–ò –§–†–û–ù–¢–ï–ù–î–ê –£–î–ê–õ–ï–ù ---
// –í –Ω–∞—à–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å Docker + Caddy, –∑–∞ —Ä–∞–∑–¥–∞—á—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç
// –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å Nginx, –∞ Caddy –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ –Ω–µ–º—É –∑–∞–ø—Ä–æ—Å—ã.
// –ë—ç–∫–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å—Ç—ã–º API-—Å–µ—Ä–≤–µ—Ä–æ–º –∏ –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ä–∞–∑–¥–∞—á–µ–π HTML.
// –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏ —á–∏—Å—Ç–æ–π.


// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(PORT, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    initializeDatabase();
    
    // --- –ü–†–û–í–ï–†–ö–ê VK –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
    const vkValidator = new VKConfigValidator();
    //vkValidator.validateAtStartup();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø—Ä–æ–≥—É–ª–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    walkService.loadQticketsData();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
module.exports = app;